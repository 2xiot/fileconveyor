#LyX 1.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble
\setcounter{page}{0}
\end_preamble
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks false
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "linkcolor=blue, citecolor=blue, urlcolor=blue, filecolor=blue, pdftex"
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Improving Drupal's page loading performance
\end_layout

\begin_layout Author
Thesis proposed to achieve the degree of bachelor
\begin_inset Newline newline
\end_inset

in computer science/ICT/knowledge technology
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Wim Leers
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\shape italic
Promotor
\shape default
: Prof.
 dr.
 Wim Lamotte
\shape italic

\begin_inset Newline newline
\end_inset

Co-promotor
\shape default
: 
\shape italic
\emph on
dr.
 Peter Quax
\emph default

\begin_inset Newline newline
\end_inset

Mentor
\shape default
s: Stijn Agten & Maarten Wijnants
\end_layout

\begin_layout Date
Hasselt University
\begin_inset Newline newline
\end_inset

Academic year 2008-2009
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Abstract
\end_layout

\begin_layout Standard
TODO
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Section
Preface
\end_layout

\begin_layout Standard
TODO
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset

 
\end_layout

\begin_layout Section
Dutch summary/Nederlandstalige samenvatting
\end_layout

\begin_layout Standard
TODO
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Terminology
\begin_inset CommandInset label
LatexCommand label
name "sec:Terminology"

\end_inset


\end_layout

\begin_layout Description
above
\begin_inset space ~
\end_inset

the
\begin_inset space ~
\end_inset

fold The initially visible part of a web page: the part that you can see
 without scrolling
\end_layout

\begin_layout Description
AHAH Asynchronous HTML And HTTP.
 Similar to AJAX, but the transfered content is HTML instead of XML.
\end_layout

\begin_layout Description
base
\begin_inset space ~
\end_inset

path The relative path in a URL that defines the root of a web site.
 E.g.
 if the site 
\family typewriter
http://example.com/
\family default
 is where a web site lives, then the base path is 
\family typewriter
/
\family default
.
 If you've got another web site at 
\family typewriter
http://example.com/subsite/
\family default
, then the base path for that web site is 
\family typewriter
/subsite/
\family default
.
\end_layout

\begin_layout Description
browser A web browser is an application that runs on end user computers
 to view web sites (which live on the World Wide Web).
 Examples are Firefox, Internet Explorer, Safari and Opera.
\end_layout

\begin_layout Description
CDN A content delivery network (CDN) is a collection of web servers distributed
 across multiple locations to deliver content more efficiently to users.
 The server selected for delivering content to a specific user is typically
 based on a measure of network proximity.
 
\end_layout

\begin_layout Description
component A component of a web page, this can be a CSS style sheet, a JavaScript
 file, an image, a font, a movie file, et cetera.
\end_layout

\begin_layout Description
CSS
\begin_inset space ~
\end_inset

sprite An image that actually contains a grid of other images.
 Through CSS, each image in the grid can then be accessed (and displayed
 to the end user).
 The benefit is that instead of having as many HTTP requests as there are
 images in the grid, there is now a single HTTP request, reducing the number
 of round trips and thereby increasing the perceived page loading speed.
\end_layout

\begin_layout Description
document
\begin_inset space ~
\end_inset

root The absolute path on the file system of the web server that corresponds
 with the root direcory of a web site.
 This is typically something like 
\family typewriter
/htdocs/example.com
\family default
.
\end_layout

\begin_layout Description
Drupal
\begin_inset space ~
\end_inset

behaviors Behaviors are event-triggered actions that attach to HTML elements,
 enhancing default non-JavaScript UIs.
 Through this system, behaviors are also attached automatically to new HTML
 elements loaded through AHAH/AJAX and HTML elements to which the behaviors
 have already been applied are automatically skipped.
\end_layout

\begin_layout Description
episode An episode in the page loading sequence.
\end_layout

\begin_layout Description
Episodes The Episodes framework 
\begin_inset CommandInset citation
LatexCommand cite
key "Episodes home page"

\end_inset

 (note the capital 'e').
\end_layout

\begin_layout Description
internationalization The process of designing a software application so
 that it can be adapted to various languages and regions without engineering
 change.
\end_layout

\begin_layout Description
lazy
\begin_inset space ~
\end_inset

loading Deferring the loading of something until it's actually needed.
 In the context of web pages, lazy loading a file implies that it will not
 be loaded until the end user will actually get to see it.
\end_layout

\begin_layout Description
localization The process of adapting internationalized software for a specific
 region or language by adding locale-specific components and translating
 text.
\end_layout

\begin_layout Description
page
\begin_inset space ~
\end_inset

loading
\begin_inset space ~
\end_inset

performance The time it takes to load a web page and all its components.
\end_layout

\begin_layout Description
page
\begin_inset space ~
\end_inset

rendering
\begin_inset space ~
\end_inset

performance The time the server needs to render a web page.
\end_layout

\begin_layout Description
PoP A Point of Presence is an access point to the internet where multiple
 Internet Service Providers connect with each other.
\end_layout

\begin_layout Description
prefetching Loading something when it not yet needed.
 In the context of web pages, prefetching a file implies that it will be
 cached by the browser before it is actually used in a web page.
\end_layout

\begin_layout Description
SLA Service-Level Agreement, part of a service contract where the level
 of service is formally defined.
 In practice, the term SLA is sometimes used to refer to the contracted
 delivery time (of the service) or performance.
\end_layout

\begin_layout Description
web
\begin_inset space ~
\end_inset

page An (X)HTML document that potentially references components.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Definition
\begin_inset CommandInset label
LatexCommand label
name "sec:Definition"

\end_inset


\end_layout

\begin_layout Standard
When an end user loads a web page, the time perceived by him until the page
 has loaded entirely is called the 
\emph on
end user response time
\emph default
.
 Unlike what you might think, the majority of this time is not spent at
 the server, generating the page! The generating (back-end) and transport
 of the HTML document (front-end) is typically only 10-20% of the end user
 response time 
\begin_inset CommandInset citation
LatexCommand cite
key "High Performance Web Sites Book"

\end_inset

.
 The other 80-90% of the time is spent on loading the components (CSS stylesheet
s, JavaScript, images, movies, et cetera) in the page (front-end only).
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:End-user-response-time"

\end_inset

 clarifies this visually:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/pageloading piechart.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
End user response time of a typical web page.
\begin_inset CommandInset label
LatexCommand label
name "fig:End-user-response-time"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
It should be obvious now that it is far more effective to focus on front-end
 performance than it is to focus on back-end performance, because it has
 got a greater potential.
 It is also easier to optimize than the back-end.
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Drupal 
\begin_inset CommandInset label
LatexCommand label
name "sec:Drupal"

\end_inset


\end_layout

\begin_layout Standard
Drupal 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal"

\end_inset

 is a content management system (CMS), although it has become more of a
 content management framework (CMF).
 The difference between the two is that the former is a system with predefined
 rules, or with relatively little flexibility.
 The latter is — as the name already indicates — a framework which still
 needs to be configured to suit your needs and therefor offers more flexibility.
\end_layout

\begin_layout Subsubsection*
History
\end_layout

\begin_layout Standard
It is an open source project, started in 2000 by Dries Buytaert, whom was
 then still studying at the University of Antwerp.
 He built a small news web site with a built-in web board, allowing his
 friends in the same dorm to leave notes or to announce when they were having
 dinner.
 After graduation, they decided they wanted to stay in touch with each other,
 so they wanted to keep this site online.
 Dries wanted to register the domain name 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout
dorp.org
\end_layout

\end_inset

 (the Dutch word for 
\begin_inset Quotes eld
\end_inset

village
\begin_inset Quotes erd
\end_inset

), which was considered a fitting name.
 But he made a typo and registered 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout
drop.org
\end_layout

\end_inset

.
\begin_inset Newline newline
\end_inset


\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout
drop.org
\end_layout

\end_inset

's audience changed as its members began talking about new web technologies,
 such as syndication, rating and distributed authentication.
 The ideas resulting from those discussions were implemented on 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout
drop.org
\end_layout

\end_inset

 itself.
\begin_inset Newline newline
\end_inset

Only later, in 2001, Dries released the software behind 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout
drop.org
\end_layout

\end_inset

 as 
\begin_inset Quotes eld
\end_inset

Drupal
\begin_inset Quotes erd
\end_inset

.
 The purpose was to enable others to use and extend the experimentation
 platform so that more people could explore new paths for development.
 The name Drupal, pronounced "droo-puhl," derives from the English pronunciation
 of the Dutch word "druppel," which means "drop" .
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/drupal.jpg
	width 20text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Drupal's mascotte: Druplicon.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
What makes it different?
\end_layout

\begin_layout Standard
There are a couple of things that separate Drupal from most other CMSes
 and CMFs.
 For starters, Drupal has a set of principles 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal principles"

\end_inset

 it strictly adheres to, amongst which is this one:
\end_layout

\begin_layout Quotation
Drupal should also have minimal, widely-available server-side software requireme
nts.
 Specifically, Drupal should be fully operational on a platform with a web
 server, PHP, and either MySQL or Postgresql.
\end_layout

\begin_layout Standard
This is the reason PHP was chosen as the language to write Drupal in.
 PHP is the justification for some people to not even try Drupal.
 But it's also a reason why so many web sites today are running Drupal,
 and why its statistics (and the popularity of its web site) have been growing
 exponentially for years 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal.org growth,Drupal growth"

\end_inset

.
\begin_inset Newline newline
\end_inset

By settling for the lowest common denominator and creating a robust, flexible
 platform on top of that, it can scale from a simple blogger (such as myself)
 to the huge media company (such as Sony BMG, Universal Music, Warner Bros,
 Popular Science, Disney, and so on), non-profit organizations (amongst
 which are Amnesty International, the United Nations and Oxfam), schools
 (Harvard, MIT and many more), even governments (including the Belgian,
 French, U.S.
 and New Zealand) and important organisations such as NASA and NATO.
 The list is seemingly endless 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal sites"

\end_inset

.
\end_layout

\begin_layout Standard
Drupal is also strongly focused on innovation, and always closely follows
 (or leads!) the cutting edge of the world wide web.
 The Drupal community even has a saying for this:
\end_layout

\begin_layout Quote
the drop is always moving 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal drop is always moving"

\end_inset


\end_layout

\begin_layout Standard
This means there will always be an upgrade from one major Drupal core version
 to the next, but it will only preserve your data, your code will stop working.
 This is what prevents Drupal from having an excessive amount of legacy
 code that many other projects suffer from.
 Each new major version contains many, often radical, changes in the APIs.
\end_layout

\begin_layout Subsubsection*
Maturity
\end_layout

\begin_layout Standard
Indicators of project maturity are also present: Drupal has a set of coding
 standards 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal coding standards"

\end_inset

 that must be followed strictly.
 For even the slightest deviation (a single missing space), a patch can
 be marked as 'needs work'.
 It also has a large security team 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal security team"

\end_inset

 which releases security advisories whenever a security flaw is found in
 either Drupal core or any of the contributed modules.
\end_layout

\begin_layout Subsubsection*
Community
\end_layout

\begin_layout Standard
That brings us to the final part of this brief general introduction to Drupal:
 the gold of Drupal is in its community.
 The community is in general very eager to help getting newcomers acquainted
 with the ins and outs of Drupal.
 Many people have learned their way through the Drupal APIs by helping others
 (including myself).
 The result of this vibrant community is that there is a very large collection
 of more than 4000 modules 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal modules"

\end_inset

 and more than 500 themes 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal themes"

\end_inset

 available for Drupal, albeit of varying quality.
 This is what enables even the less technically adept to build a web site
 with complex interactions, without writing a single line of code.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Why it matters
\begin_inset CommandInset label
LatexCommand label
name "sec:Why-it-matters"

\end_inset


\end_layout

\begin_layout Standard
Page loading performance matters for a single reason:
\end_layout

\begin_layout Quote
Users care about performance!
\end_layout

\begin_layout Standard
Your web site's visitors will not be timing the page loads themselves, but
 they will browse elsewhere when you are forcing them to wait too long.
 Fast web sites are rewarded, slow web sites are punished.
 Fast web sites get more visitors, have happier visitors and their visitors
 return more often.
 If the revenue of your company is generated through your web site, you'll
 want to make sure that page loading performance is as good as possible,
 because it will maximize your revenue as well.
\end_layout

\begin_layout Standard
Some statistics:
\end_layout

\begin_layout Itemize
Amazon: 100 ms of extra load time caused a 1% drop in sales 
\begin_inset CommandInset citation
LatexCommand cite
key "presentation Design Fast Websites"

\end_inset


\end_layout

\begin_layout Itemize
Yahoo!: 400 ms of extra load time caused a 5-9% drop in full-page traffic
 (meaning that they leave before the page has finished loading) 
\begin_inset CommandInset citation
LatexCommand cite
key "presentation Design Fast Websites"

\end_inset


\end_layout

\begin_layout Itemize
Google: 500 ms of extra load time caused 20% fewer searches 
\begin_inset CommandInset citation
LatexCommand cite
key "presentation Design Fast Websites"

\end_inset


\end_layout

\begin_layout Itemize
Google: trimming page size by 30% resulted in 30% more map requests 
\begin_inset CommandInset citation
LatexCommand cite
key "Google maps load time impact"

\end_inset


\end_layout

\begin_layout Standard
It is clear that even the smallest delays can have disastrous and wondrous
 effects.
 
\end_layout

\begin_layout Standard
Now, why is this important to Drupal – because this bachelor thesis is about
 improving Drupal's page loading performance in particular? Because then
 the Drupal experience is better: a faster web site results in happier users
 and developers.
 If your site is a commercial one, either through ads or a store, then it
 also impacts your revenue.
 More generally, a faster Drupal would affect many:
\end_layout

\begin_layout Itemize
Drupal is increasingly being used for big, high-traffic web sites, thus
 a faster Drupal would affect a lot of people
\end_layout

\begin_layout Itemize
Drupal is still growing in popularity (according to its usage statistics,
 which only include web sites with the Update Status module enabled, there
 are over 140,000 web sites as of February 22, 2009, see 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal usage statistics"

\end_inset

) and would therefor affect ever more people.
 Near the end of my bachelor thesis, on June 14, 2009, this had already
 grown to more than 175,000 web sites.
 
\end_layout

\begin_layout Itemize
Drupal is international, thanks to its internationalization and localization
 support, and thanks to that it is used for sites with very geographically
 dispersed audiences (whom face high network latencies) and developing countries
 (where low-speed internet connections are commonplace).
 A faster Drupal would make a big difference there as well.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Key Properties of a CDN
\begin_inset CommandInset label
LatexCommand label
name "sec:Key-Properties-CDN"

\end_inset


\end_layout

\begin_layout Standard
I will repeat the definition from the terminology section:
\end_layout

\begin_layout Quotation
A content delivery network (CDN) is a collection of web servers distributed
 across multiple locations to deliver content more efficiently to users.
 The server selected for delivering content to a specific user is typically
 based on a measure of network proximity.
 
\end_layout

\begin_layout Standard
It is extremely hard to decide which CDN to use.
 In fact, by just looking at a CDN's performance, it is close to impossible
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "cdn-comparing-1,cdn-comparing-2"

\end_inset

!
\end_layout

\begin_layout Standard
That is why CDNs achieve differentiation through their featuresets, not
 through performance.
 Depending on your audience, the geographical spread (the number of PoPs
 around the world) may be very important to you.
 A 100% SLA is also nice to have — this means that the CDN guarantees that
 it will be online 100% of the time.
\begin_inset Newline newline
\end_inset

You may also choose a CDN based on the population methods it supports.
 There are two big categories here: 
\emph on
push
\emph default
 and 
\emph on
pull
\emph default
.
 Pull requires virtually no work on your side: all you have to do, is rewrite
 the URLs to your files: replace your own domain name with the CDN's domain
 name.
 The CDN will then apply the 
\emph on
Origin Pull
\emph default
 technique and will periodically pull the files from the origin (that is
 your server).
 How often that is, depends on how you've configured headers (particularly
 the 
\family typewriter
Expires
\family default
 header).
 It of course also depends on the software driving the CDN – there is no
 standard in this field.
 It may also result in redundant traffic because files are being pulled
 from the origin server more often than they actually change, but this is
 a minor drawback in most situations.
 Push on the other hand requires a fair amount of work from your part to
 sync files to the CDN.
 But you gain flexibility because you can decide when files are synced,
 how often and if any preprocessing should happen.
 That is much harder to do with Origin Pull CDNs.
 See table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Pull-versus-Push"

\end_inset

 for an overview on this.
\begin_inset Newline newline
\end_inset

It should also be noted that some CDNs, if not most, support both Origin
 Pull and one or more push methods.
\begin_inset Newline newline
\end_inset

The last thing to consider is vendor lock-in.
 Some CDNs offer highly specialized features, such as video transcoding.
 If you then discover another CDN that is significantly cheaper, you cannot
 easily move, because you are depending on your current CDN's specific features.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
Pull
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
Push
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
transfer protocol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
none
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FTP, SFTP, WebDAV, Amazon S3 …
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
advantages
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
virtually no setup
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
flexibility, no redundant traffic
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
disadvantages
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no flexibility, redundant traffic
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
setup
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Pull versus Push CDNs comparison table.
 
\begin_inset CommandInset label
LatexCommand label
name "tab:Pull-versus-Push"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
My aim is to suppor the following CDNs in this thesis:
\end_layout

\begin_layout Itemize
any CDN that supports Origin Pull
\end_layout

\begin_layout Itemize
any CDN that supports FTP
\end_layout

\begin_layout Itemize
Amazon S3 
\begin_inset CommandInset citation
LatexCommand cite
key "Amazon S3"

\end_inset

 and Amazon CloudFront 
\begin_inset CommandInset citation
LatexCommand cite
key "Amazon CloudFront"

\end_inset

.
 Amazon S3 (or Simple Storage Service in full) is a storage service that
 can be accessed via the web (via REST and SOAP interfaces).
 It is used by many other web sites and web services.
 It has a pay-per-use pricing model: per GB of file transfer and per GB
 of storage.
\begin_inset Newline newline
\end_inset

Amazon S3 is designed to be a storage service and only has servers in one
 loation in the U.S.
 and one location in Europe.
 Recently, Amazon CloudFront has been added.
 This is a service on top of S3 (files must be on S3 before they can be
 served from CloudFront), which has edge servers everywhere in the world,
 thereby acting as a CDN.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Profiling tools
\end_layout

\begin_layout Quote

\emph on
If you can not measure it, you can not improve it.
\end_layout

\begin_layout Quote
Lord Kelvin
\end_layout

\begin_layout Standard
The same applies to page loading performance: if you cannot measure it,
 you cannot know which parts have the biggest effect and thus deserve your
 focus.
 So before doing any real work, we'll have to figure out which tools can
 help us analyzing page loading performance.
 
\begin_inset Quotes eld
\end_inset

Profiling
\begin_inset Quotes erd
\end_inset


\emph on
 
\emph default
turns out to be a more accurate description than 
\begin_inset Quotes eld
\end_inset

analyzing
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Quotation
In software engineering, 
\emph on
performance analysis, more commonly today known as profiling
\emph default
, is the investigation of a program's behavior using information gathered
 as the program executes.
 The 
\emph on
usual goal of performance analysis is to determine which sections of a program
 to optimize
\emph default
 — usually either to increase its speed or decrease its memory requirement
 (or sometimes both).
 
\begin_inset CommandInset citation
LatexCommand cite
key "profiling"

\end_inset


\end_layout

\begin_layout Standard
So we'll go through a list of tools: UA Profiler, Cuzillion, YSlow, Hammerhead,
 Apache JMeter, Gomez/Keynote/WebMetrics/Pingdom and Jiffy/Episodes.
 As you can tell, it is a pretty long list, so I'll pick the tools I'll
 use while improving Drupal's page loading performance based on two factors:
\end_layout

\begin_layout Enumerate
How the tool could help improve Drupal core's page loading performance.
\end_layout

\begin_layout Enumerate
How the tool could help Drupal site owners to profile their site's page
 loading performance.
\end_layout

\begin_layout Subsection
UA Profiler
\end_layout

\begin_layout Standard
UA Profiler 
\begin_inset CommandInset citation
LatexCommand cite
key "UA Profiler"

\end_inset

 is a crowd-sourced project for gathering browser performance characteristics
 (on the number of parallel connections, downloading scripts without blocking,
 caching, et cetera).
 The tests run automatically when you navigate to the test page from any
 browser – this is why it is powered by crowdsourcing.
\end_layout

\begin_layout Standard
It is a handy 
\emph on
reference
\emph default
 to find out which browser supports which features related to page loading
 performance.
\end_layout

\begin_layout Subsection
Cuzillion
\end_layout

\begin_layout Standard
Cuzillion 
\begin_inset CommandInset citation
LatexCommand cite
key "Cuzillion"

\end_inset

 was introduced 
\begin_inset CommandInset citation
LatexCommand cite
key "Cuzillion announcement"

\end_inset

 on April 25, 2008 so it is a relatively new tool.
 Its tag line, 
\emph on

\begin_inset Quotes eld
\end_inset

‘cuz there are zillion pages to check
\emph default

\begin_inset Quotes erd
\end_inset

 indicates what it is about: there are a lot of possible combinations of
 stylesheets, scripts and images.
 Plus they can be external or inline.
 And each combination has different effects.
 Finally, to further complicate the situation, all these combinations depend
 on the browser being used.
 It should be obvious that without Cuzillion, it is an insane job to figure
 out how each browser behaves:
\end_layout

\begin_layout Quote
Before I would open an editor and build some test pages.
 Firing up a packet sniffer I would load these pages in different browsers
 to diagnose what was going on.
 I was starting my research on advanced techniques for loading scripts without
 blocking and realized the number of test pages needed to cover all the
 permutations was in the hundreds.
 That was the birth of Cuzillion.
\end_layout

\begin_layout Standard
Cuzillion is not a tool that helps you analyze any 
\emph on
existing 
\emph default
web page.
 Instead, it allows you to analyze any combination of components.
 That means it is a 
\emph on
learning tool
\emph default
.
 You could also look at it as a 
\emph on
browser profiling tool
\emph default
 instead of all other listed tools, which are 
\emph on
page loading profiling tools
\emph default
.
\end_layout

\begin_layout Standard
Let's go through a simple example for a better understanding.
 How does the following combination of components (in the 
\family typewriter
<body>
\family default
 tag) behave in different browsers?
\end_layout

\begin_layout Enumerate
an image on domain 1 with a 2 second delay
\end_layout

\begin_layout Enumerate
an inline script with a 2 second execution time
\end_layout

\begin_layout Enumerate
an image on domain 1 with a 2 second delay
\end_layout

\begin_layout Standard
First you create this setup in Cuzillion (see figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Cuzillion"

\end_inset

).
 This generates a unique URL.
 You can then copy this URL to all browsers you would like to test.
\end_layout

\begin_layout Standard
As you can see, Safari and Firefox behave very differently.
 In Safari (see figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Cuzillion-Safari"

\end_inset

), the loading of the first image seems to be deferred until the inline
 script has been executed (the images are displayed when the light purple
 bars become darkpurple).
 In Firefox (see figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Cuzillion-Firefox"

\end_inset

), the first image is immediately rendered and after a delay of 2 seconds
 – indeed the execution time of the inline script – the second image is
 rendered (the images are displayed when the gray bars stop).
 Without going into details about this, it should be clear that Cuzillion
 is a simple, yet powerful tool to learn about browser behavior, which can
 in turn help to improve the page loading performance.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/profiling/cuzillion.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The example situation created in Cuzillion.
\begin_inset CommandInset label
LatexCommand label
name "fig:Cuzillion"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/wimleers/School/thesis/svn/doc/images/profiling/cuzillion - safari.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The example situation in Safari 3.
\begin_inset CommandInset label
LatexCommand label
name "fig:Cuzillion-Safari"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/profiling/cuzillion - firefox.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The example situation in Firefox 3.
\begin_inset CommandInset label
LatexCommand label
name "fig:Cuzillion-Firefox"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
YSlow
\begin_inset CommandInset label
LatexCommand label
name "sub:YSlow"

\end_inset


\end_layout

\begin_layout Standard
YSlow 
\begin_inset CommandInset citation
LatexCommand cite
key "YSlow"

\end_inset

 is a Firebug 
\begin_inset CommandInset citation
LatexCommand cite
key "Firebug"

\end_inset

 extension (see figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:YSlow-example"

\end_inset

) that can be used to analyze page loading performance through thirteen
 rules.
 These were part of the original fourteen rules 
\begin_inset CommandInset citation
LatexCommand cite
key "YSlow Rules"

\end_inset

 – of which there are now thirty-four – of 
\begin_inset Quotes eld
\end_inset

Exceptional Performance
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "Exceptional Performance"

\end_inset

, as developed by the Yahoo! performance team.
\end_layout

\begin_layout Standard
YSlow 1.0 can only evaluate these thirteen rules and has a hardcoded grading
 algorithm.
 You should also remember that YSlow just checks how well a web page implements
 these rules.
 It analyzes the content of your web page (and the headers that were sent
 with it).
 For example, it does not test the latency or speed of a CDN, it just checks
 if you are using one.
 As an example, because you have to tell YSlow (via Firefox' 
\family typewriter
about:config
\family default
) what the domain name of your CDN is, you can even fool YSlow into thinking
 any site is using a CDN: see 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Tricking-YSlow"

\end_inset

.
\end_layout

\begin_layout Standard
That, and the fact that some of the rules it analyzes are only relevant
 to 
\emph on
very
\emph default
 big web sites.
 For example, one of the rules (#13, 
\begin_inset Quotes eld
\end_inset

Configure ETags
\begin_inset Quotes erd
\end_inset

) is only relevant if you are using a cluster of web servers.
 For a more in-depth article on how to deal with YSlow's evaluation of your
 web sites, see 
\begin_inset CommandInset citation
LatexCommand cite
key "YSlow Jeff Atwood"

\end_inset

.
 YSlow 2.0 
\begin_inset CommandInset citation
LatexCommand cite
key "YSlow 2.0 early preview"

\end_inset

 aims to be more extensible and customizable: it will allow for community
 contributions, or even web site specific rules.
\end_layout

\begin_layout Standard
Since only YSlow 1.0 is available at the time of writing, I'll stick with
 that.
 It is a very powerful and helpful tool as it stands, it'll just get better.
 But remember the two caveats: it only verifies rules (it does not measure
 real-world performance) and some of the rules may not be relevant for your
 web site.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/wimleers/School/thesis/svn/doc/images/profiling/YSlow.png
	width 100text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
YSlow applied to drupal.org.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:YSlow-example"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /Users/wimleers/School/thesis/svn/doc/images/profiling/YSlow drupal.org without CDN.png
	width 40text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The original YSlow analysis.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /Users/wimleers/School/thesis/svn/doc/images/profiling/YSlow drupal.org with CDN.png
	width 40text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The resulting YSlow analysis.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tricking YSlow into thinking drupal.org is using a CDN.
\begin_inset CommandInset label
LatexCommand label
name "fig:Tricking-YSlow"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Hammerhead
\begin_inset CommandInset label
LatexCommand label
name "sub:Hammerhead"

\end_inset


\end_layout

\begin_layout Standard
Hammerhead 
\begin_inset CommandInset citation
LatexCommand cite
key "Hammerhead,Hammerhead announcement"

\end_inset

 is a Firebug 
\begin_inset CommandInset citation
LatexCommand cite
key "Firebug"

\end_inset

 extension that should be used 
\emph on
while
\emph default
 developing.
 It measures how long a page takes to load and it can load a page multiple
 times, to calculate the average and mean page load times.
 Of course, this is a lot less precise than real-world profiling, but it
 allows you to profile while you are working.
 It is far more effective to prevent page loading performance problems due
 to changes in code, because you have the test results within seconds or
 minutes after you've made these changes!
\end_layout

\begin_layout Standard
Of course, you could also use YSlow (see section 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "sub:YSlow"

\end_inset

) or FasterFox 
\begin_inset CommandInset citation
LatexCommand cite
key "Fasterfox"

\end_inset

, but then you have to load the page multiple times (i.e.
 
\emph on
hammer 
\emph default
the server, this is where the name comes from).
 And you would still have to set up the separate testing conditions for
 each page load that Hammerhead already sets up for you: empty cache, primed
 cache and for the latter there are again two possible situations: disk
 cache 
\emph on
and
\emph default
 memory cache or just disk cache.
 Memory cache is of course faster than disk cache; that is also why that
 distinction is important.
 Finally, it supports exporting the resulting data into CSV format, so you
 could even create some tools to roughly track page loading performance
 throughout time.
\begin_inset Newline newline
\end_inset

A screenshot of Hammerhead is provided in figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Hammerhead"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/profiling/Hammerhead.png
	scale 36

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Hammerhead.
\begin_inset CommandInset label
LatexCommand label
name "fig:Hammerhead"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Apache JMeter
\begin_inset CommandInset label
LatexCommand label
name "sub:Apache-JMeter"

\end_inset


\end_layout

\begin_layout Standard
Apache JMeter 
\begin_inset CommandInset citation
LatexCommand cite
key "Apache JMeter"

\end_inset

 is an application 
\emph on
designed to load test functional behavior and measure performance
\emph default
.
 In the perspective of profiling page loading performance, the relevant
 features are: loading of web pages with and without its components and
 measuring the response time of just the HTML or the HTML and all the components
 it references.
\end_layout

\begin_layout Standard
However, it has several severe limitations:
\end_layout

\begin_layout Itemize
Because it only measures from one location – the location from where it
 is run, it does not give a good big picture.
\end_layout

\begin_layout Itemize
It is not an actual browser, so it does not download components referenced
 from CSS or JS files.
\end_layout

\begin_layout Itemize
Also because it is not an actual browser, it does not behave the same as
 browsers when it comes to parallel downloads.
\end_layout

\begin_layout Itemize
It requires more setup than Hammerhead (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Hammerhead"

\end_inset

), so it is less likely that a developer will make JMeter part of his workflow.
\end_layout

\begin_layout Standard
It can be very useful in case you are doing performance testing (How long
 does the back-end need to generate certain pages?), load testing (how many
 concurrent users can the back-end/server setup handle?) and stress testing
 (how many concurrent users can it handle until errors ensue?).
\begin_inset Newline newline
\end_inset

To learn more about load testing Drupal with Apache JMeter, see 
\begin_inset CommandInset citation
LatexCommand cite
key "JMeter Drupal article 1,JMeter Drupal article 2"

\end_inset


\end_layout

\begin_layout Subsection
Gomez/Keynote/WebMetrics/Pingdom
\begin_inset CommandInset label
LatexCommand label
name "sub:Gomez/Keynote/WebMetrics/Pingdom"

\end_inset


\end_layout

\begin_layout Standard
Gomez 
\begin_inset CommandInset citation
LatexCommand cite
key "Gomez web site"

\end_inset

, KeyNote 
\begin_inset CommandInset citation
LatexCommand cite
key "Keynote web site"

\end_inset

, WebMetrics 
\begin_inset CommandInset citation
LatexCommand cite
key "WebMetrics web site"

\end_inset

 and Pingdom 
\begin_inset CommandInset citation
LatexCommand cite
key "Pingdom web site"

\end_inset

 are examples of third-party (paid) performance monitoring systems.
\end_layout

\begin_layout Standard
They have four major disadvantages:
\end_layout

\begin_layout Enumerate
limited number of measurement points
\end_layout

\begin_layout Enumerate
no real-world browsers are used
\end_layout

\begin_layout Enumerate
unsuited for Web 2.0
\end_layout

\begin_layout Enumerate
paid & closed source
\end_layout

\begin_layout Subsubsection
Limited number of measurement points
\end_layout

\begin_layout Standard
These services poll your site at regular or irregular intervals.
 This poses analysis problems: for example, if one of your servers is very
 slow just at that one moment that any of these services requests a page,
 you will be told that there is a major issue with your site.
 But that is not necessarily true: it might be a fluke.
\end_layout

\begin_layout Subsubsection
No real-world browsers
\end_layout

\begin_layout Standard
Most, if not all of these services use their own custom clients 
\begin_inset CommandInset citation
LatexCommand cite
key "video of Velocity 2008 Jiffy presentation"

\end_inset

.
 That implies their results aren't a representation of the real-world situation,
 which means you cannot rely upon these metrics for making decisions: what
 if a commonly used real-world browser behaves completely differently? Even
 if the services would all use real-world browsers, they would never reflect
 real-world performance, because each site has different visitors and therefor
 also a different mix of browsers.
\end_layout

\begin_layout Subsubsection
Unsuited for Web 2.0
\end_layout

\begin_layout Standard
The problem with these services is that they still assume the World Wide
 Web is the same as it was 10 years ago, where JavaScript was rather a scarcity
 than the abundancy it is today.
 They still interpret the 
\family typewriter
onload
\family default
 event as the 
\begin_inset Quotes eld
\end_inset

end time
\begin_inset Quotes erd
\end_inset

 for response time measurements.
 In Web 1.0, that was fine.
 But as the adoption of AJAX 
\begin_inset CommandInset citation
LatexCommand cite
key "AJAX wikipedia"

\end_inset

 has grown, the 
\family typewriter
onload
\family default
 event has become less and less representative of when the page is ready
 (i.e.
 has completely loaded), because the page can continue to load additional
 components.
 For some web sites, the 
\begin_inset Quotes eld
\end_inset

above the fold
\begin_inset Quotes erd
\end_inset

 section of a web page has been optimized, thereby loading 
\begin_inset Quotes eld
\end_inset

heavier
\begin_inset Quotes erd
\end_inset

 content later, below the fold.
 Thus the 
\begin_inset Quotes eld
\end_inset

page ready
\begin_inset Quotes erd
\end_inset

 point in time is shifted from its default.
\end_layout

\begin_layout Standard
In both of these cases, the 
\family typewriter
onload
\family default
 event is too optimistic 
\begin_inset CommandInset citation
LatexCommand cite
key "white paper Episodes"

\end_inset

.
\end_layout

\begin_layout Standard
There are two ways to measure Web 2.0 web sites 
\begin_inset CommandInset citation
LatexCommand cite
key "presentation Episodes"

\end_inset

:
\end_layout

\begin_layout Enumerate

\emph on
manual scripting
\emph default
: identify timing points using scripting tools (Selenium 
\begin_inset CommandInset citation
LatexCommand cite
key "web site Selenium"

\end_inset

, Keynote's KITE 
\begin_inset CommandInset citation
LatexCommand cite
key "Keynote KITE"

\end_inset

, et cetera).
 This approach has a long list of disadvantages: low accuracy, high switching
 costs, high maintenance costs, synthetic (no real-world measurements).
\end_layout

\begin_layout Enumerate

\emph on
programmatic scripting
\emph default
: timing points are marked by JavaScript (Jiffy 
\begin_inset CommandInset citation
LatexCommand cite
key "Jiffy project"

\end_inset

, Gomez Script Recorder 
\begin_inset CommandInset citation
LatexCommand cite
key "Gomez Script Recorder"

\end_inset

, et cetera).
 This is the preferred approach: it has lower maintenance costs and a higher
 accuracy because the code for timing is included in the other code and
 measures real user traffic.
\begin_inset Newline newline
\end_inset

If we would now work on a shared implementation of this approach, then we
 would not have to reinvent the wheel every time and switching costs would
 be much lower.
 See the Jiffy/Episodes later on.
\end_layout

\begin_layout Subsubsection
Paid & closed source
\end_layout

\begin_layout Standard
The end user is dependent upon the third party service to implement new
 instrumentations and analyses.
 It is typical for closed source applications to only implement the most
 commonly asked feature and because of that, the end user may be left out
 in the cold.
 There is a high cost for the implementation and a also a very high cost
 when switching to a different third party service.
\end_layout

\begin_layout Subsection
Jiffy/Episodes
\begin_inset CommandInset label
LatexCommand label
name "sub:Jiffy/Episodes"

\end_inset


\end_layout

\begin_layout Subsubsection
Jiffy
\begin_inset CommandInset label
LatexCommand label
name "sub:Jiffy"

\end_inset


\end_layout

\begin_layout Standard
Jiffy 
\begin_inset CommandInset citation
LatexCommand cite
key "Velocity 2008 Jiffy presentation,video of Velocity 2008 Jiffy presentation,Jiffy project"

\end_inset

 is designed to give you real-world information on what is actually happening
 within browsers of users that are visiting your site.
 It shows you how long pages really take to load and how long events that
 happen while or after your page is loading really take.
 Especially when you do not control all the components of your web site
 (e.g.
 widgets of photo and music web sites, contextual ads or web analytics services)
, it is important that you can monitor their performance.
 It overcomes four major disadvantages that were listed previously:
\end_layout

\begin_layout Enumerate
it can measure 
\emph on
every
\emph default
 page load if desired
\end_layout

\begin_layout Enumerate
real-world browsers are used, because it is just JavaScript code that runs
 in the browser
\end_layout

\begin_layout Enumerate
well-suited for Web 2.0, because you can configure it to measure 
\emph on
anything
\end_layout

\begin_layout Enumerate
open source
\end_layout

\begin_layout Standard
Jiffy consists of several components:
\end_layout

\begin_layout Itemize

\family typewriter
Jiffy.js
\family default
: a library for measuring your pages and reporting measurements
\end_layout

\begin_layout Itemize
Apache configuration: to receive and log measurements via a specific query
 string syntax
\end_layout

\begin_layout Itemize
Ingestor: parse logs and store in a database (currently only supports Oracle
 XE)
\end_layout

\begin_layout Itemize
Reporting toolset
\end_layout

\begin_layout Itemize
Firebug extension 
\begin_inset CommandInset citation
LatexCommand cite
key "Jiffy Firebug Extension"

\end_inset

, see figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Jiffy"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/profiling/Jiffy.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Jiffy.
\begin_inset CommandInset label
LatexCommand label
name "fig:Jiffy"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Jiffy was built to be used by the WhitePages web site 
\begin_inset CommandInset citation
LatexCommand cite
key "web site WhitePages"

\end_inset

 and has been running on that site.
 At more than 10 million page views per day, it should be clear that Jiffy
 can scale quite well.
 It has been released as an open source project, but at the time of writing,
 the last commit was on July 25, 2008.
 So it is a dead project.
\end_layout

\begin_layout Subsubsection
Episodes
\begin_inset CommandInset label
LatexCommand label
name "sub:Episodes"

\end_inset


\end_layout

\begin_layout Standard
Episodes 
\begin_inset CommandInset citation
LatexCommand cite
key "Episodes home page,Episodes white paper"

\end_inset

 is very much like Jiffy.
 There are two differences:
\end_layout

\begin_layout Enumerate
Episodes' goal is to become an industry standard.
 This would imply that the aforementioned third party services (Gomez/Keynote/We
bMetrics/Pingdom) would take advantage of the the instrumentations implemented
 through Episodes in their analyses.
\end_layout

\begin_layout Enumerate
Most of the implementation is built into browsers (
\family typewriter
window.postMessage(),
\family default
 
\family typewriter
addEventListener()
\family default
), which means there is less code that must be downloaded.
 (Note: the newest versions of browsers are necessary: Internet Explorer
 8, Firefox 3, WebKit Nightlies and Opera 9.5.
 An additional backwards compatibility JavaScript file must be downloaded
 for older browsers.
\end_layout

\begin_layout Standard
Steve Souders outlines the goals and vision for Episodes succinctly in these
 two paragraphs:
\end_layout

\begin_layout Quotation

\emph on
The goal is to make Episodes the industrywide solution for measuring web
 page load times.

\emph default
 This is possible because Episodes has benefits for all the stakeholders.
 Web developers only need to learn and deploy a single framework.
 Tool developers and web metrics service providers get more accurate timing
 information by relying on instrumentation inserted by the developer of
 the web page.
 Browser developers gain insight into what is happening in the web page
 by relying on the context relayed by Episodes.
\end_layout

\begin_layout Quotation
Most importantly, users benefit by the adoption of Episodes.
 They get a browser that can better inform them of the web page's status
 for Web 2.0 apps.
 Since Episodes is a lighter weight design than other instrumentation frameworks
, users get faster pages.
 As Episodes makes it easier for web developers to shine a light on performance
 issues, 
\emph on
the end result is an Internet experience that is faster for everyone
\emph default
.
\end_layout

\begin_layout Standard
A couple of things can be said about the current codebase of Episodes:
\end_layout

\begin_layout Itemize
There are two JavaScript files: 
\family typewriter
episodes.js
\family default
 and 
\family typewriter
episodes-compat.js
\family default
.
 The latter is loaded on-the-fly when an older browser is being used that
 does not support 
\family typewriter
window.postMessage()
\family default
.
 These files are operational but have not had wide testing yet.
\end_layout

\begin_layout Itemize
It uses the same query string syntax as Jiffy uses to perform logging, which
 means Jiffy's Apache configuration, ingestor and reporting toolset can
 be reused, at least partially.
\end_layout

\begin_layout Itemize
It has its own Firebug extension, see figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Episodes"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/profiling/Episodes.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Episodes.
\begin_inset CommandInset label
LatexCommand label
name "fig:Episodes"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
So, Episodes' very 
\emph on
raison d'existence
\emph default
 is to achieve a concensus on a JavaScript-based page loading instrumentation
 toolset.
 It aims to become an industry standard and is maintained by Steve Souders,
 who is currently on Google's payroll to work full-time on all things related
 to page loading performance (which suggests we might see integration with
 Google's Analytics 
\begin_inset CommandInset citation
LatexCommand cite
key "Google Analytics"

\end_inset

 service in the future).
 Add in the fact that Jiffy hasn't been updated since its initial release,
 and it becomes clear that Episodes is the better long-term choice.
\end_layout

\begin_layout Subsection
Conclusion
\begin_inset CommandInset label
LatexCommand label
name "sub:ProfilingTools:Conclusion"

\end_inset


\end_layout

\begin_layout Standard
There is not a single, 
\begin_inset Quotes eld
\end_inset

do-it-all
\begin_inset Quotes erd
\end_inset

 tool that you should use.
 Instead, you should wisely combine all of the above tools.
 Use the tool that fits the task at hand.
\end_layout

\begin_layout Standard
However, for the scope of this thesis, there is one tool that jumps out:
 YSlow.
 It allows you to carefully analyze which things Drupal could be doing better.
 It is not necessarily meaningful in real-world situations, because it e.g.
 only checks if you are using a CDN, not how fast that CDN is.
 But the fact that it tests whether a CDN is being used (or Expired headers,
 or gzipped components, or …) is enough to find out what can be improved,
 to maximize the potential performance.
\begin_inset Newline newline
\end_inset

This kind of analysis is exactly what I'll perform in the next section.
\end_layout

\begin_layout Standard
There is one more tool that jumps out for real, practical use: Episodes.
 This tool, if properly integrated with Drupal, would be a key asset to
 Drupal, because it would enable web site owners to track the real-world
 page loading performance.
 It would allow module developers to support Episodes.
 This, in turn, would be a good indicator for a module's quality and would
 allow the web site owner/administrator/developer to carefully analyze each
 aspect of his Drupal web site.
\begin_inset Newline newline
\end_inset

I have created this integration as part of my bachelor thesis, see section
 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Episodes.module"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
The State of Drupal's page loading performance
\begin_inset CommandInset label
LatexCommand label
name "sec:The-State-of-Drupal"

\end_inset


\end_layout

\begin_layout Standard
So you might expect that Drupal has already invested heavily in improving
 its page loading performance.
 Unfortunately, that is not true.
 Hopefully this bachelor thesis will help to gain some developer attention.
\end_layout

\begin_layout Standard
Because of this, the article I wrote more than a year ago is still completely
 applicable.
 It does not make much sense to just rephrase the article here in my thesis
 text, so instead I'd like to forward you to that article
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "drupal-performance-article"

\end_inset

 for the details.
 The article analyzes Drupal based on the 14 rules defined in Steve Souder's
 High Performance Web Sites book.
\end_layout

\begin_layout Standard
The essence of the article is that Drupal does some things right already,
 but many more not yet.
 The things Drupal did wrong then — and still does wrong today because nothing
 has changed in this area, yet:
\end_layout

\begin_layout Itemize
Static files (CSS, JavaScript, images) should be served with proper HTTP
 headers so that the browser can cache them and reduce the number of HTTP
 requests for each page load.
 Especially the Expires header is important here.
\end_layout

\begin_layout Itemize
To allow for CDN integration in Drupal, the ability to dynamically alter
 file URLs is needed, but this is not supported yet.
\end_layout

\begin_layout Itemize
CSS and JS files should be served GZIPped when the browser supports it.
\end_layout

\begin_layout Itemize
JavaScript files should be at the bottom (just before the closing 
\family typewriter
</body>
\family default
 tag) whenever possible.
\end_layout

\begin_layout Itemize
JavaScript files should be minified.
\end_layout

\begin_layout Itemize
Drupal should provide a mechanism to render the same content in multiple
 formats: (X)HTML (for the regular browser), partial HTML or JSON (for AHAH),
 XML (for AJAX) and so on.
 You should be able to set transformations, including cacheability and GZIPabili
ty per format.
\end_layout

\begin_layout Itemize
CSS sprites should be generated automatically.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Improving Drupal: Episodes integration
\begin_inset CommandInset label
LatexCommand label
name "sec:Episodes.module"

\end_inset


\end_layout

\begin_layout Standard
The work I am doing as part of bachelor thesis on improving Drupal's page
 loading performance should be practical, not theoretical.
 It should have a real-world impact.
\end_layout

\begin_layout Standard
To ensure that that also happens, I wrote the Episodes module 
\begin_inset CommandInset citation
LatexCommand cite
key "Episodes Drupal module project page"

\end_inset

.
 This module integrates the Episodes framework for timing web pages (see
 section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Episodes"

\end_inset

) with Drupal on several levels – 
\emph on
all without modifying Drupal core
\emph default
:
\end_layout

\begin_layout Itemize
Automatically includes the necessary JavaScript files and settings on each
 appropriate page.
\end_layout

\begin_layout Itemize
Automatically inserts the crucial initializiation variables at the beginning
 of the 
\family typewriter
head
\family default
 tag.
\end_layout

\begin_layout Itemize
Automatically turns each behavior (in 
\family typewriter
Drupal.behaviors
\family default
) into its own episode.
\end_layout

\begin_layout Itemize
Provides a centralized mechanism for lazy loading callbacks that perform
 the lazy loading of content.
 These are then also automatically measured.
\end_layout

\begin_layout Itemize
For measuring the 
\family typewriter
css
\family default
, 
\family typewriter
headerjs
\family default
 and 
\family typewriter
footerjs
\family default
 episodes, you need to change a couple of lines in the 
\family typewriter
page.tpl.php
\family default
 file of your theme.
 That is the only modification you have to make by hand.
 It is acceptable because a theme always must be tweaked for a given web
 site.
\end_layout

\begin_layout Itemize
Provides basic reports with charts to make sense of the collected data.
\end_layout

\begin_layout Standard
I actually wrote two Drupal modules: the Episodes module and the Episodes
 Server module.
 The former is the 
\emph on
actual
\emph default
 integration and can be used without the latter.
 The latter can be installed on a separate Drupal web site or on the same.
 It provides basic reports.
 It is recommended to install this on a separate Drupal web site, and preferably
 even a separate web server, because it has to process a lot of data and
 isn't optimized.
 That would have led me too far outside of the scope of this bachelor thesis.
\end_layout

\begin_layout Standard
You could also choose to not enable the Episodes Server module and use an
 external web service to generate reports, but for now, no such services
 yet exist.
 This void will probably be filled in the next few years by the business
 world.
 It might become the subject of my master thesis.
\end_layout

\begin_layout Subsection
The goal
\end_layout

\begin_layout Standard
The goal is to measure the different episodes of loading a web page.
 Let me clarify that via a timeline, while referencing the HTML in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lst:sample-HTML"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},float=h,language=HTML,numbers=left,numberstyle={\scriptsize},showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
\end_layout

\begin_layout Plain Layout

  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
\end_layout

\begin_layout Plain Layout

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
\end_layout

\begin_layout Plain Layout

  <head>
\end_layout

\begin_layout Plain Layout

    <title>Sample Drupal HTML</title>
\end_layout

\begin_layout Plain Layout

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
\end_layout

\begin_layout Plain Layout

    <link rel="shortcut icon" href="/misc/favicon.ico" type="image/x-icon"
 />
\end_layout

\begin_layout Plain Layout

    <link type="text/css" rel="stylesheet" media="all" href="main.css" />
\end_layout

\begin_layout Plain Layout

    <link type="text/css" rel="stylesheet" media="print" href="more.css"
 />
\end_layout

\begin_layout Plain Layout

    <script type="text/javascript" src="main.js"></script>
\end_layout

\begin_layout Plain Layout

    <script type="text/javascript">
\end_layout

\begin_layout Plain Layout

    <!--//--><![CDATA[//><!--
\end_layout

\begin_layout Plain Layout

    jQuery.extend(Drupal.settings, { "basePath": "/drupal/", "more": true
 });
\end_layout

\begin_layout Plain Layout

    //--><!]]>
\end_layout

\begin_layout Plain Layout

    </script>
\end_layout

\begin_layout Plain Layout

    <!--[if lt IE 7]>
\end_layout

\begin_layout Plain Layout

      <link type="text/css" rel="stylesheet" media="all" href="fix-ie.css
 />
\end_layout

\begin_layout Plain Layout

    <![endif]-->
\end_layout

\begin_layout Plain Layout

  </head>
\end_layout

\begin_layout Plain Layout

  <body>
\end_layout

\begin_layout Plain Layout

    <!--
\end_layout

\begin_layout Plain Layout

      lots
\end_layout

\begin_layout Plain Layout

      of
\end_layout

\begin_layout Plain Layout

      HTML
\end_layout

\begin_layout Plain Layout

      here
\end_layout

\begin_layout Plain Layout

    -->
\end_layout

\begin_layout Plain Layout

    <script type="text/javascript" src="more.js"></script>
\end_layout

\begin_layout Plain Layout

  </body>
\end_layout

\begin_layout Plain Layout

</html>
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Sample Drupal HTML file.
\begin_inset CommandInset label
LatexCommand label
name "lst:sample-HTML"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The main measurement points are:
\end_layout

\begin_layout Itemize
starttime: time of requesting the web page (when the 
\family typewriter
onbeforeunload
\family default
 event fires, the time is stored in a cookie); not in the HTML file
\end_layout

\begin_layout Itemize
firstbyte: time of arrival of the first byte of the HTML file (the JavaScript
 to measure this time should be as early in the HTML as possible for highest
 possible accuracy); line 1 of the HTML file
\end_layout

\begin_layout Itemize
domready: when the entire HTML document is loaded, but 
\emph on
just
\emph default
 the HTML, 
\emph on
not
\emph default
 the referenced files
\end_layout

\begin_layout Itemize
pageready: when the 
\family typewriter
onload
\family default
 event fires, this happens when also all referenced files are loaded
\end_layout

\begin_layout Itemize
totaltime: when everything, including lazily-loaded content, is loaded (i.e.
 pageready + the time to lazy-load content)
\end_layout

\begin_layout Standard
Which make for these basic episodes:
\end_layout

\begin_layout Itemize
backend episode = firstbyte - starttime
\end_layout

\begin_layout Itemize
frontend episode = pageready - firstbyte
\end_layout

\begin_layout Itemize
domready episode = domready - firstbyte, this episode is contained within
 the frontend episode
\end_layout

\begin_layout Itemize
totaltime episode = totaltime - starttime, this episode contains the backend
 and frontend episodes
\end_layout

\begin_layout Standard
These are just the basic time measurements and episodes.
 It is possible to also measure the time it took to load the CSS (lines
 8-9, this would be the 
\family typewriter
css
\family default
 episode) and JavaScript files in the header (line 10, this would be the
 
\family typewriter
headerjs
\family default
 episode) and in the footer (line 27, this would be the 
\family typewriter
footerjs
\family default
 episode), for example.
 It is possible to measure just about anything you want.
\end_layout

\begin_layout Standard
For a visual example of all the above, see figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Results-of-Episodes-module-in-Firebug"

\end_inset

.
\end_layout

\begin_layout Subsection
Making episodes.js reusable
\begin_inset CommandInset label
LatexCommand label
name "sub:Episodes.module:reusable"

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
episodes.js
\family default
 file provided at the Episodes example 
\begin_inset CommandInset citation
LatexCommand cite
key "Episodes Example"

\end_inset

 is in fact just a rough sample implementation, an implementation that indicates
 what it should look like.
 It contained sveral hardcoded URLs, does not measure the sensible default
 episodes, contains a few bugs.
 In short, it is an excellent and solid start, but it needs some work to
 be truly reusable.
\end_layout

\begin_layout Standard
I improved 
\family typewriter
episodes.js
\family default
 to make it reusable, so that I could integrate it with Drupal without adding
 Drupal-specific code to it.
 I made it so that all you have to do is something like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},float=h,language=HTML,numbers=left,numberstyle={\scriptsize},tabsize=4"
inline false
status open

\begin_layout Plain Layout

<head>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<!-- Initialize EPISODES.
 -->
\end_layout

\begin_layout Plain Layout

<script type="text/javascript">
\end_layout

\begin_layout Plain Layout

	var EPISODES = EPISODES || {};
\end_layout

\begin_layout Plain Layout

	EPISODES.frontendStartTime = Number(new Date());
\end_layout

\begin_layout Plain Layout

	EPISODES.compatScriptUrl = "lib/episodes-compat.js";
\end_layout

\begin_layout Plain Layout

	EPISODES.logging = true;
\end_layout

\begin_layout Plain Layout

	EPISODES.beaconUrl = "episodes/beacon";
\end_layout

\begin_layout Plain Layout

</script>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<!-- Load episodes.js.
 -->
\end_layout

\begin_layout Plain Layout

<script type="text/javascript" src="lib/episodes.js" />
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<!-- Rest of head tag.
 -->
\end_layout

\begin_layout Plain Layout

<!-- ...
 -->
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

</head>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This way, you can initialize the variables to the desired values without
 customizing 
\family typewriter
episodes.js
\family default
.
 Line 6 should be as early in the page as possible, because it is the most
 important reference timestamp.
\end_layout

\begin_layout Subsection
Episodes module: integration with Drupal
\end_layout

\begin_layout Subsubsection
Implementation
\end_layout

\begin_layout Standard
Here is a brief overview with the highlights of what had to be done to integrate
 the Episodes framework with Drupal.
\end_layout

\begin_layout Itemize
Implemented 
\family typewriter
hook_install()
\family default
, through which I set a module weight of -1000.
 This extremely low module weight ensures the hook implementations of this
 module are always executed before all others.
\end_layout

\begin_layout Itemize
Implemented 
\family typewriter
hook_init()
\family default
, which is invoked at the end of the Drupal bootstrap process.
 Through this hook I automatically insert the JavaScript into the 
\family typewriter
<head>
\family default
 tag that is necessary to make Episodes work (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Episodes.module:reusable"

\end_inset

).
 Thanks to the extremely low module weight, the JavaScript code it inserts
 is the first tag in the 
\family typewriter
<head>
\family default
 tag.
\end_layout

\begin_layout Itemize
Also through this same hook I add 
\family typewriter
Drupal.episodes.js
\family default
, which provides the actual integration with Drupal.
 It automatically creates an episode for each Drupal 
\begin_inset Quotes eld
\end_inset

behavior
\begin_inset Quotes erd
\end_inset

.
 (A behavior is written in JavaScript and adds interactivity to the web
 page.) Each time new content is added to the page through AHAH, 
\family typewriter
Drupal.attachBehaviors()
\family default
 is called and automatically attaches behaviors to new content, but not
 to existing content.
 Through 
\family typewriter
Drupal.episodes.js
\family default
, Drupal's default 
\family typewriter
Drupal.attachBehaviors()
\family default
 method is overridden – this is very easy in JavaScript.
 In this overridden version, each behavior is automatically measured as
 an episode.
\begin_inset Newline newline
\end_inset

Thanks to Drupal's existing abstraction and the override I have implemented,
 all JavaScript code can be measured through Episodes without hacking Drupal
 core.
\begin_inset Newline newline
\end_inset

A simplified version of what it does can be seen here:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},float=h,language=Java,tabsize=2"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Drupal.attachBehaviors = function(context) {
\end_layout

\begin_layout Plain Layout

	url = document.location;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	for (behavior in Drupal.behaviors) {
\end_layout

\begin_layout Plain Layout

		window.postMessage("EPISODES:mark:" + behavior, url);
\end_layout

\begin_layout Plain Layout

		Drupal.behaviors[behavior](context);
\end_layout

\begin_layout Plain Layout

		window.postMessage("EPISODES:measure:" + behavior, url);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Drupal.attachBehaviors() override.
\begin_inset CommandInset label
LatexCommand label
name "lst:Drupal.attachBehaviors()"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Some of the Drupal behaviors are too meaningless to measure, so it would
 be nice to be able to mark some of the behaviors as ignored.
 That is also something I implemented.
 Basically I do this by locating every directory in which one or more 
\family typewriter
*.js
\family default
 files exist, create a scan job for each of these and queue them in Drupal's
 Batch API 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal Batch API"

\end_inset

.
 Each of these jobs scans each 
\family typewriter
*.js
\family default
 file, looking for behaviors.
 Every detected behavior is stored in the database and can be marked as
 ignored through a simple UI that uses the Hierarchical Select module 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal Hierarchial Select"

\end_inset

.
\end_layout

\begin_layout Itemize
For measuring the 
\family typewriter
css
\family default
 and 
\family typewriter
headerjs
\family default
 episodes, it is necessary to make a couple of simple (copy-and-paste) changes
 to the 
\family typewriter
page.tpl.php
\family default
 of the Drupal theme(s) you are using.
 These changes are explained in the 
\family typewriter
README.txt
\family default
 file that ships with the Episodes module.
 This is the only manual change to code that 
\emph on
can
\emph default
 be done – it is recommended, but not required.
\end_layout

\begin_layout Itemize
And of course a configuration UI (see figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Episodes-module-settings-form"

\end_inset

 and figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Episodes-module-behaviors-settings-form"

\end_inset

) using the Forms API 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal Forms API"

\end_inset

.
 It ensures the logging URL (this is the URL through which the collected
 data is logged to Apache's log files) exists and is properly configured
 (i.e.
 returns a zero-byte file).
\end_layout

\begin_layout Subsubsection
Screenshots
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /Users/wimleers/School/thesis/svn/doc/images/episodes/episodes–admin-settings-episodes.png
	width 100text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Episodes module settings form.
\begin_inset CommandInset label
LatexCommand label
name "fig:Episodes-module-settings-form"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /Users/wimleers/School/thesis/svn/doc/images/episodes/episodes–admin-settings-episodes-behaviors.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Episodes module behaviors settings form.
\begin_inset CommandInset label
LatexCommand label
name "fig:Episodes-module-behaviors-settings-form"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/episodes/episodes-firebug.png
	height 75pheight%
	rotateAngle 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Results of Episodes module in the Episodes Firebug add-on.
\begin_inset CommandInset label
LatexCommand label
name "fig:Results-of-Episodes-module-in-Firebug"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Episodes Server module: reports
\end_layout

\begin_layout Standard
Only basic reports are provided, highlighting the most important statistics
 and visualizing them through charts.
 Advanced/detailed reports are beyond the scope of this bachelor thesis,
 because they require extensive performance research (to be able to handle
 massive datasets), database indexing optimization and usability research.
\end_layout

\begin_layout Subsubsection
Implementation
\end_layout

\begin_layout Itemize
First of all, the Apache HTTP server is a requirement as this application's
 logging component is used for generating the log files.
 Its logging component has been proven to be scalable, so there is no need
 to roll our own.
\begin_inset Newline newline
\end_inset

The source of this idea lies with Jiffy (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Jiffy"

\end_inset

).
\end_layout

\begin_layout Itemize
The user must make some changes to his 
\family typewriter
httpd.conf
\family default
 configuration file for his Apache HTTP server.
 As just mentioned, my implementation is derived from Jiffy's, yet every
 configuration line is different.
\end_layout

\begin_layout Itemize
The ingestor parses the Apache log file and moves the data to the database.
 I was able to borrow a couple of regular expressions from Jiffy's ingestor
 (which is written in Perl) but I completely rewrote it to obtain clean
 and simple code, conform the Drupal coding guidelines.
 It detects the browser, browser version and operating system from the User
 Agent that was logged with the help of the Browser.php library 
\begin_inset CommandInset citation
LatexCommand cite
key "Browser.php"

\end_inset

.
\begin_inset Newline newline
\end_inset

This is guaranteed to work thanks to the included meticulous unit tests.
\end_layout

\begin_layout Itemize
For the reports, I used the Google Chart API 
\begin_inset CommandInset citation
LatexCommand cite
key "Google Chart API"

\end_inset

.
 You can see an example result in figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Episodes-Server-module-report"

\end_inset

.
\end_layout

\begin_layout Itemize
And of course again a configuration UI (see figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Episodes-Server-module-settings-form"

\end_inset

) using the Forms API 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal Forms API"

\end_inset

.
 It ensures the log file exists and is accessible for reading.
\end_layout

\begin_layout Subsubsection
Screenshots
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/episodes/episodes_server-admin-settings-episodes-server.png
	width 100text%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Episodes Server module settings form.
\begin_inset CommandInset label
LatexCommand label
name "fig:Episodes-Server-module-settings-form"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/episodes/episodes_server-reports.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Report generated by the Episodes Server module.
\begin_inset CommandInset label
LatexCommand label
name "fig:Episodes-Server-module-report"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Desired future features
\end_layout

\begin_layout Standard
Due to lack of time, the basic reports are … well … very basic.
 It would be nice to have more charts and to be able to filter the data
 of the charts.
 In particular, these three filters would be very useful:
\end_layout

\begin_layout Enumerate
filter by timespan: all time, 1 year, 6 months, 1 month, 1 week, 1 day
\end_layout

\begin_layout Enumerate
filter by browser and browser version
\end_layout

\begin_layout Enumerate
filter by (parts of) the URL
\end_layout

\begin_layout Subsection
Insights
\end_layout

\begin_layout Itemize
Episodes module
\end_layout

\begin_deeper
\begin_layout Itemize
Generating the back-end start time on the server can never work reliably
 because the clocks of the client (browser) and server are never perfectly
 in sync, which is required.
 Thus, I simply kept Steve Souders' 
\family typewriter
onbeforeunload
\family default
 method to log the time when a next page was requested.
 The major disadvantage of this method is that it is impossible to measure
 the 
\family typewriter
backend
\family default
 episode for each pageload: it is only possible to measure the 
\family typewriter
backend
\family default
 episode when the user navigates through our site (more specifically, when
 the referrer is the same as the current domain).
\end_layout

\begin_layout Itemize
Even just measuring the page execution time on the server cannot work because
 of this same reason.
 You 
\emph on
can
\emph default
 accurately measure this time, but you cannot 
\emph on
relate
\emph default
 it to the measurements in the browser.
 I implemented this using Drupal's 
\family typewriter
hook_boot()
\family default
 and 
\family typewriter
hook_exit()
\family default
 hooks and came to this conclusion.
\end_layout

\begin_layout Itemize
On the first page load, the 
\family typewriter
onbeforeunload
\family default
 cookie is not yet set and therefor the 
\family typewriter
backend
\family default
 episode cannot be calculated, which in turn prevents the 
\family typewriter
pageready
\family default
 and 
\family typewriter
totalti
\family default
me episodes from being calculated.
 This is of course also a problem when cookies are disabled, because then
 the 
\family typewriter
backend
\family default
 episode can 
\emph on
never
\emph default
 be calculated.
 There is no way around this until the day that browsers provide something
 like 
\family typewriter
document.requestTime
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize
Episodes Server module
\end_layout

\begin_deeper
\begin_layout Itemize
Currently the same database as Drupal is being used.
 Is this scalable enough for analyzing the logs of web sites with millions
 of page views? No.
 Writing everything to a SQLite database would not be better.
 The real solution is to use a different server to run the Episodes Server
 module on or even an external web service.
 Better even is to log to your own server and then send the logs to an external
 web service.
 This way you stay in control of all your data! Because you still have your
 log data, you can switch to another external web service, thereby avoiding
 vendor lock-in.
 The main reason I opted for using the same database, is ease of development.
\begin_inset Newline newline
\end_inset

Optimizing the profiling tool is not the goal of this bachelor thesis, optimizin
g page loading performance is.
 As I already mentioned before, writing an advanced profiling tool could
 be a master thesis on its own.
\end_layout

\end_deeper
\begin_layout Subsection
Feedback from Steve Souders
\end_layout

\begin_layout Standard
I explained Steve Souders what I wanted to achieve through this bachelor
 thesis and the initial work I had already done on integrating Episodes
 with Drupal.
 This is how his reply started:
\end_layout

\begin_layout Quotation
Wow.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Quotation
Wow, this is awesome.
\end_layout

\begin_layout Standard
So, at least he thinks that this was a worthwhile job, which suggests that
 it will probably be worthwhile/helpful for the Drupal community as well.
\begin_inset Newline newline
\end_inset

Unfortunately for me, Steve Souders is a very busy man, speaking at many
 web-related conferences, teaching at Stanford, writing books and working
 at Google.
 He did not manage to get back to my list of questions.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Wait for Steve's further feedback.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Daemon
\begin_inset CommandInset label
LatexCommand label
name "sec:daemon"

\end_inset


\end_layout

\begin_layout Standard
So now that we have the tools to accurately (or at least 
\emph on
representatively
\emph default
) measure the effects of using a CDN, we still have to start using a CDN.
 Next, we will examine how a web site can take advantage of a CDN.
\end_layout

\begin_layout Standard
As explained in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Key-Properties-CDN"

\end_inset

, there are two very different methods for populating CDNs.
 Supporting pull is easy, supporting push is a lot of work.
 But if we want to avoid vendor lock-in, it is necessary to be able to transpare
ntly switch between pull and any of the transfer protocols for push.
 Suppose that you are using CDN A, which only supports FTP.
 when you want to switch to a cheaper, yet better CDN B, that would be a
 costly operation, because CDN B only supports a custom protocol.
\end_layout

\begin_layout Standard
To further reduce costs, it is necessary that we can do the preprocessing
 ourselves (be that video transcoding, image optimization or anything else).
 Also note that many CDNs do not support processing of files — but it can
 reduce the amount of bandwidth consumed significantly, and thereby the
 bill received every month.
\end_layout

\begin_layout Standard
That is why the meat of this thesis is about a daemon that makes it just
 as easy to use either push or pull CDNs and that gives you full flexibility
 in what kind of preprocessing you would like to perform.
 All you will have to do to integrate your web site with a CDN is:
\end_layout

\begin_layout Enumerate
install the daemon
\end_layout

\begin_layout Enumerate
tell it what to do by filling out a simple configuration file
\end_layout

\begin_layout Enumerate
start the daemon
\end_layout

\begin_layout Enumerate
retrieve the URLs of the synced files from an SQLite database (so you can
 alter the existing URLs to files to the ones for the CDN)
\end_layout

\begin_layout Subsection
Goals
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:Goals"

\end_inset


\end_layout

\begin_layout Standard
As said before, the ability to use either push or pull CDNs is an absolute
 necessity, as is the ability to process files before they are synced to
 the CDN.
 However, there is more to it than just that, so here is a full list of
 goals.
\end_layout

\begin_layout Itemize
Easy to use: the configuration file is the interface and explain itself
 just by its structure
\end_layout

\begin_layout Itemize
Transparency: the transfer protocol(s) supported by the CDN should be irrelevant
\end_layout

\begin_layout Itemize
Mixing CDNs and static ﬁle servers
\end_layout

\begin_layout Itemize
Processing before sync: image optimization, video transcoding …
\end_layout

\begin_layout Itemize
Detect (and sync) new ﬁles instantly: through inotify on Linux, FSEvents
 on Mac OS X and the FindFirstChangeNotification API or ReadDirectoryChanges
 API on Windows (there is also the FileSystemWatcher class for .NET)
\end_layout

\begin_layout Itemize
Robustness: when the daemon is stopped (or when it crashed), it should know
 where it left off and sync all added, modified and deleted files that it
 was still syncing and that have been added, modified and deleted while
 it was not running
\end_layout

\begin_layout Itemize
Scalable: syncing 1,000 or 1,000,000 files – and keeping them synced – should
 work just as well
\end_layout

\begin_layout Itemize
Unit testing wherever feasible
\end_layout

\begin_layout Itemize
Design for reuse wherever possible
\end_layout

\begin_layout Itemize
Low resource consumption (except for processors, which may be very demanding
 because of their nature)
\end_layout

\begin_layout Itemize
No dependencies other than Python (but processors can have additional dependenci
es)
\end_layout

\begin_layout Standard
A couple of these goals need more explaining.
\end_layout

\begin_layout Standard
The transparency goal should speak for itself, but you may not yet have
 realized its impact.
 This is what will avoid high CDN provider switching costs, that is, it
 helps to avoid vendor lock-in.
\end_layout

\begin_layout Standard
Detecting and syncing files instantly is a must to ensure CDN usage is as
 high as possible.
 If new files would only be detected every 10 minutes, then visitors may
 be downloading files directly from the web server instead of from the CDN.
 This increases the load on the web server unnecessarily and also increases
 the page load time for the visitors.
\begin_inset Newline newline
\end_inset

For example, one visitor has uploaded images as part of the content he created.
 All visitors will be downloading the image from the web server, which is
 suboptimal, considering that they could've been downloading it from the
 CDN.
\end_layout

\begin_layout Standard
The ability to mix CDNs and static file servers makes it possible to either
 maximize the page loading performance or minimize the costs.
 Depending on your company's customerbase, you may either want to pay for
 a global CDN or a local one.
 If you are a global company, a global CDN makes sense.
 But if you are present only in a couple of countries, say the U.S.A., Japan
 and France, it does not make sense to pay for a global CDN.
 It is probably cheaper to pay for a North-American CDN and a couple of
 strategically placed static file servers in Japan and France to cover the
 rest of your customer base.
 Without this daemon, this is rather hard to set up.
 With it however, it becomes child's play: all you have to do, is configure
 multiple destinations.
 That is all there is to it.
 It is then still up to you how you use these files, though.
 To decide from which server you will let your visitors download the files,
 you could look at the IP, or if your visitors must register, at the country
 they have entered in their profile.
 This also allows for event-driven server allocation.
 For example if a big event is being hosted in Paris, you could temporarily
 hire another server in Paris to ensure low latency and high throughput.
\end_layout

\begin_layout Subsubsection*
Other use cases
\end_layout

\begin_layout Standard
The daemon, or at least one or more of the modules that were written for
 it, can be reused in other applications.
 For example:
\end_layout

\begin_layout Itemize
Back-up tool
\end_layout

\begin_layout Itemize
Video transcoding server (e.g.
 to transcode videos uploaded by visitors to H.264 or Flash video)
\end_layout

\begin_layout Itemize
Key component in creating your own CDN
\end_layout

\begin_layout Itemize
Key component in a file synchronization tool for consumers 
\end_layout

\begin_layout Subsection
Configuration file design
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:Configuration-file-design"

\end_inset


\end_layout

\begin_layout Standard
Since the configuration file is the interface and I had a good idea of the
 features I wanted to support, I started by writing a configuration file.
 That might be unorthodox, but in the end, this is the most important part
 of the daemon.
 If it is too hard to configure, nobody will use it.
 If it is easy to use, more people will be inclined to give it a try.
\end_layout

\begin_layout Standard
Judge for yourself how easy it is by looking at listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "lst:sample-config-file"

\end_inset

.
 Beneath the config root node, there are 3 child nodes, one for each of
 the 3 major sections:
\end_layout

\begin_layout Enumerate

\family typewriter
sources
\family default
: indicate each data source in which new, modified and deleted files will
 be detected recursively.
 Each source has a name (that we will reference later in the configuration
 file) and of course a 
\family typewriter
scanPath
\family default
, which defines the root directory within which new/modified/deleted files
 will be detected.
 It can also optionally have the 
\family typewriter
documentRoot
\family default
 and 
\family typewriter
basePath
\family default
 attributes, which may be necessary for some processors that perform magic
 with URLs.
\end_layout

\begin_layout Enumerate

\family typewriter
servers
\family default
: provide the settings for all servers that will be used in this configuration.
 Each server has a 
\family typewriter
name
\family default
 and a 
\family typewriter
transporter
\family default
 that it should use.
 The child nodes of the 
\family typewriter
server
\family default
 node are the settings that are passed to that transporter.
\end_layout

\begin_layout Enumerate

\family typewriter
rules
\family default
: this is the heart of the configuration file, since this is what determines
 what goes where.
 Each rule is associated with a source (via the 
\family typewriter
for
\family default
 attribute), must have a 
\family typewriter
label
\family default
 attribute and can consist (but does not have to!) of three parts:
\end_layout

\begin_deeper
\begin_layout Enumerate

\family typewriter
filter
\family default
: can contain 
\family typewriter
paths
\family default
, 
\family typewriter
extensions
\family default
, 
\family typewriter
ignoredDirs
\family default
, 
\family typewriter
pattern
\family default
 and 
\family typewriter
size
\family default
 child nodes.
 The text values of these nodes will be used to filter the files that have
 been created, modified or deleted within the source to which this rule
 applies.
 If it is a match, then the rule will be applied (and therefor the processor
 chain and destination associated with it).
 Otherwise, this rule is ignored for that file.
 See the filter module (section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:daemon:modules:filter.py"

\end_inset

) explanation for details.
\end_layout

\begin_layout Enumerate

\family typewriter
processorChain
\family default
: accepts any number of 
\family typewriter
processor
\family default
 nodes through which you reference (via the 
\family typewriter
name
\family default
 attribute) the procesor module and the specific processor class within
 that processor module that you would like to use.
 They'll be chained in the order you specify here.
\end_layout

\begin_layout Enumerate

\family typewriter
destinations
\family default
: accepts any number of 
\family typewriter
destination
\family default
 nodes through which you specify all servers to which the file should be
 transported.
 Each 
\family typewriter
destination
\family default
 node must have a 
\family typewriter
server
\family default
 attribute and can have a 
\family typewriter
path
\family default
 attribute.
 The 
\family typewriter
path
\family default
 attribute sets a parent path (on the server) inside which the files will
 be transported.
\end_layout

\end_deeper
\begin_layout Standard
Reading the above should make less sense than simply reading the configuration
 file.
 If that is the case for you too, then I succeeded.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},float,tabsize=4"
inline false
status open

\begin_layout Plain Layout

<?xml version="1.0" encoding="UTF-8"?>
\end_layout

\begin_layout Plain Layout

<config>
\end_layout

\begin_layout Plain Layout

  <!-- Sources -->
\end_layout

\begin_layout Plain Layout

  <sources>
\end_layout

\begin_layout Plain Layout

    <source name="drupal" scanPath="/htdocs/drupal" documentRoot=
\begin_inset Quotes erd
\end_inset

/htdocs
\begin_inset Quotes erd
\end_inset

 basePath=
\begin_inset Quotes erd
\end_inset

/drupal/
\begin_inset Quotes erd
\end_inset

 />
\end_layout

\begin_layout Plain Layout

    <source name="downloads" scanPath="/Users/wimleers/Downloads" />
\end_layout

\begin_layout Plain Layout

  </sources>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  <!-- Servers -->
\end_layout

\begin_layout Plain Layout

  <servers>
\end_layout

\begin_layout Plain Layout

    <server name="origin pull cdn" transporter="symlink_or_copy">
\end_layout

\begin_layout Plain Layout

      <location>/htdocs/drupal/staticfiles</location>
\end_layout

\begin_layout Plain Layout

      <url>http://mydomain.mycdn.com/staticfiles</url>
\end_layout

\begin_layout Plain Layout

    </server>
\end_layout

\begin_layout Plain Layout

    <server name="ftp push cdn" transporter="ftp" maxConnections="5">
\end_layout

\begin_layout Plain Layout

      <host>localhost</host>
\end_layout

\begin_layout Plain Layout

      <username>daemontest</username>
\end_layout

\begin_layout Plain Layout

      <password>daemontest</password>
\end_layout

\begin_layout Plain Layout

      <url>http://localhost/daemontest/</url>
\end_layout

\begin_layout Plain Layout

    </server>
\end_layout

\begin_layout Plain Layout

  </servers>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  <!-- Rules -->
\end_layout

\begin_layout Plain Layout

  <rules>
\end_layout

\begin_layout Plain Layout

    <rule for="drupal" label="CSS, JS, images and Flash">
\end_layout

\begin_layout Plain Layout

      <filter>
\end_layout

\begin_layout Plain Layout

        <paths>modules:misc</paths>
\end_layout

\begin_layout Plain Layout

        <extensions>ico:js:css:gif:png:jpg:jpeg:svg:swf</extensions>
\end_layout

\begin_layout Plain Layout

        <ignoredDirs>CVS:.svn</ignoredDirs>
\end_layout

\begin_layout Plain Layout

      </filter>
\end_layout

\begin_layout Plain Layout

      <processorChain>
\end_layout

\begin_layout Plain Layout

        <processor name="image_optimizer.KeepFilename" />
\end_layout

\begin_layout Plain Layout

        <processor name="yui_compressor.YUICompressor" />
\end_layout

\begin_layout Plain Layout

		<processor name=
\begin_inset Quotes erd
\end_inset

link_updater.CSSURLUpdater
\begin_inset Quotes erd
\end_inset

 />
\end_layout

\begin_layout Plain Layout

        <processor name="unique_filename.Mtime" />
\end_layout

\begin_layout Plain Layout

      </processorChain>
\end_layout

\begin_layout Plain Layout

     <destinations>
\end_layout

\begin_layout Plain Layout

        <destination server="origin pull cdn" />
\end_layout

\begin_layout Plain Layout

        <destination server="ftp push cdn" path="static" />
\end_layout

\begin_layout Plain Layout

      </destinations>
\end_layout

\begin_layout Plain Layout

    </rule>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    <rule for="drupal" label="Videos">
\end_layout

\begin_layout Plain Layout

      <filter>
\end_layout

\begin_layout Plain Layout

        <paths>modules:misc</paths>
\end_layout

\begin_layout Plain Layout

        <extensions>flv:mov:avi:wmv</extensions>
\end_layout

\begin_layout Plain Layout

        <ignoredDirs>CVS:.svn</ignoredDirs>
\end_layout

\begin_layout Plain Layout

        <size conditionType="minimum">1000000</size>
\end_layout

\begin_layout Plain Layout

      </filter>
\end_layout

\begin_layout Plain Layout

      <processorChain>
\end_layout

\begin_layout Plain Layout

        <processor name="unique_filename.MD5" />
\end_layout

\begin_layout Plain Layout

      </processorChain>
\end_layout

\begin_layout Plain Layout

      <destinations>
\end_layout

\begin_layout Plain Layout

        <destination server="ftp push cdn" path="videos" />
\end_layout

\begin_layout Plain Layout

      </destinations>
\end_layout

\begin_layout Plain Layout

    </rule>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    <rule for="downloads" label="Mirror">
\end_layout

\begin_layout Plain Layout

      <filter>
\end_layout

\begin_layout Plain Layout

        <extensions>mov:avi</extensions>
\end_layout

\begin_layout Plain Layout

      </filter>
\end_layout

\begin_layout Plain Layout

      <destinations>
\end_layout

\begin_layout Plain Layout

        <destination server="origin pull cdn" path="mirror" />
\end_layout

\begin_layout Plain Layout

        <destination server="ftp push cdn" path="mirror" />
\end_layout

\begin_layout Plain Layout

      </destinations>
\end_layout

\begin_layout Plain Layout

    </rule>
\end_layout

\begin_layout Plain Layout

  </rules>
\end_layout

\begin_layout Plain Layout

</config>
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Sample configuration file.
\begin_inset CommandInset label
LatexCommand label
name "lst:sample-config-file"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Python modules
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules"

\end_inset


\end_layout

\begin_layout Standard
All modules have been written with reusability in mind: none of them make
 assumptions about the daemon itself and are therefor reusable in other
 Python applications.
\end_layout

\begin_layout Subsubsection
filter.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:filter.py"

\end_inset


\end_layout

\begin_layout Standard
This module provides the 
\family typewriter
Filter
\family default
 class.
 Through this class, you can check if a given file path matches a set of
 conditions.
 This class is used to determine which processors should be applied to a
 given file and to which CDN it should be synced.
\end_layout

\begin_layout Standard
This class has just 2 methods: 
\family typewriter
set_conditions()
\family default
 and 
\family typewriter
matches()
\family default
.
 There are 5 different conditions you can set.
 The last two should be used with care, because they are a lot slower than
 the first three.
 Especially the last one can be very slow, because it must access the file
 system.
\begin_inset Newline newline
\end_inset

If there are several valid options within a single condition, a match with
 
\emph on
any
\emph default
 of them is sufficient (OR).
 Finally, 
\emph on
all
\emph default
 conditions must be satisfied (AND) before a given file path will result
 in a positive match.
\begin_inset Newline newline
\end_inset

The five conditions are:
\end_layout

\begin_layout Enumerate

\family typewriter
paths
\family default
: a list of paths (separated by colons) in which the file can reside
\end_layout

\begin_layout Enumerate

\family typewriter
extensions
\family default
: a list of extensions (separated by colons) the file can have
\end_layout

\begin_layout Enumerate

\family typewriter
ignoredDirs
\family default
: a list of directories (separated by colons) that should be ignored, meaning
 that if the file is inside one of those directories, 
\family typewriter
Filter
\family default
 will mark this as a negative match – this is useful to ignore data in typical
 
\family typewriter
CVS
\family default
 and 
\family typewriter
.svn
\family default
 directories
\end_layout

\begin_layout Enumerate

\family typewriter
pattern
\family default
: a regular expression the file path must match
\end_layout

\begin_layout Enumerate

\family typewriter
size
\end_layout

\begin_deeper
\begin_layout Enumerate

\family typewriter
conditionType
\family default
: either 
\family typewriter
minimum
\family default
 or 
\family typewriter
maximum
\end_layout

\begin_layout Enumerate

\family typewriter
treshold
\family default
: the treshold in bytes
\end_layout

\end_deeper
\begin_layout Standard
This module is fully unit-tested and is therefor guaranteed to work flawlessly.
\end_layout

\begin_layout Subsubsection
pathscanner.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:pathscanner.py"

\end_inset


\end_layout

\begin_layout Standard
As is to be expected, this module provides the 
\family typewriter
PathScanner
\family default
 class, which scans paths and stores them in a SQLite 
\begin_inset CommandInset citation
LatexCommand cite
key "SQLite"

\end_inset

 database.
 You can use 
\family typewriter
PathScanner
\family default
 to detect changes in a directory structure.
 For efficiency, only creations, deletions and modifications are detected,
 not moves.
 This class is used to scan the file system for changes when no supported
 filesystem monitor is installed on the current operating system.
 It is also used for persistent storage: when the daemon has been stopped,
 the database built and maintained through/by this class is used as a reference,
 to detect changes that have happened before it was started again.
 This mean 
\family typewriter
PathScanner
\family default
 is used during the initialization of the daemon, regardless of the available
 file system monitors.
\end_layout

\begin_layout Standard
The database schema is very simple: (
\family typewriter
path
\family default
, 
\family typewriter
filename
\family default
, 
\family typewriter
mtime
\family default
).
 Directories are also stored; in that case, 
\family typewriter
path
\family default
 is the path of the parent directory, 
\family typewriter
filename
\family default
 is the directory name and 
\family typewriter
mtime
\family default
 is set to -1.
 Modified files are detected by comparing the current mtime with the value
 stored in the 
\family typewriter
mtime
\family default
 column.
\end_layout

\begin_layout Standard
Changes to the database are committed in batches, because changes in the
 filesystem typically occur in batches as well.
 Changes are committed to the database on a per-directory level.
 However, if many changes occured in a single directory and if every change
 would be committed separately, the concurrency level would rise unnecessarily.
 By default, every batch of 50 changes inside a directory is committed.
\end_layout

\begin_layout Standard
This class provides you with 8 methods:
\end_layout

\begin_layout Itemize

\family typewriter
initial_scan()
\family default
 to build the initial database – works recursively
\end_layout

\begin_layout Itemize

\family typewriter
scan()
\family default
 to get the changes – does not work recursively
\end_layout

\begin_layout Itemize

\family typewriter
scan_tree()
\family default
 (uses 
\family typewriter
scan()
\family default
) to get the changes in an entire directory structure – obviously works
 recursively
\end_layout

\begin_layout Itemize

\family typewriter
purge_path()
\family default
 to purge all the metadata for a path from the database
\end_layout

\begin_layout Itemize

\family typewriter
add_files(),
\family default
 
\family typewriter
update_files()
\family default
, 
\family typewriter
remove_files()
\family default
 to add/update/remove files manually (useful when your application has more/fast
er knowledge of changes)
\end_layout

\begin_layout Standard
This module does not have any tests yet, because it requires 
\emph on
a lot
\emph default
 of mock functions to simulate system calls.
 It has been tested manually thoroughly though.
\end_layout

\begin_layout Subsubsection
fsmonitor.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:fsmonitor.py"

\end_inset


\end_layout

\begin_layout Standard
This time around, there is more to it than it seems.
 
\family typewriter
fsmonitor.py
\family default
 provides 
\family typewriter
FSMonitor
\family default
, a base class from which subclasses derive.
 
\family typewriter
fsmonitor_inotify.py
\family default
 has the 
\family typewriter
FSMonitorInotify
\family default
 class, 
\family typewriter
fsmonitor_fsevents.py
\family default
 has 
\family typewriter
FSMonitorFSEvents
\family default
 and 
\family typewriter
fsmonitor_polling.py
\family default
 has 
\family typewriter
FSMonitorPolling
\family default
.
\begin_inset Newline newline
\end_inset

Put these together and you have a single, easy to use abstraction for each
 major operating system's file system monitor:
\end_layout

\begin_layout Itemize
Uses inotify 
\begin_inset CommandInset citation
LatexCommand cite
key "inotify"

\end_inset

 on Linux (kernel 2.6.13 and higher)
\end_layout

\begin_layout Itemize
Uses FSEvents 
\begin_inset CommandInset citation
LatexCommand cite
key "FSEvents,FSEvents review"

\end_inset

 on Mac OS X (10.5 and higher)
\end_layout

\begin_layout Itemize
Falls back to polling when neither one is present
\end_layout

\begin_layout Standard
Windows support is possible, but hasn't been implemented yet due to time
 constraints.
 There are two APIs to choose between: FindFirstChangeNotification and ReadDirec
toryChanges.
 There is a third, the FileSystemWatcher class, but this is only usable
 from within .NET and Visual C++, so it is an unlikely option because it
 is not directly accessible from within Python.
 This was already mentioned in 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:daemon:Goals"

\end_inset

.
\end_layout

\begin_layout Standard
The ReadDirectoryChanges API is more similar to inotify in that it triggers
 events on the file level.
 The disadvantage is that this is a blocking API.
 FindFirstChangeNotification is a non-blocking API, but is more similar
 to FSEvents, in that it triggers events on the directory level.
 A comprehensive, yet concise comparison is available at 
\begin_inset CommandInset citation
LatexCommand cite
key "MS fsmonitor APIs"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Implementation obstacles
\end_layout

\begin_layout Standard
To make this class work consistently, less critical features that are only
 available for specific file system monitors are abstracted away.
 And other features are emulated.
 It comes down to the fact that 
\family typewriter
FSMonitor
\family default
's API is very simple to use and only supports 5 different events: 
\family typewriter
CREATED
\family default
, 
\family typewriter
MODIFIED
\family default
, 
\family typewriter
DELETED
\family default
, 
\family typewriter
MONITORED_DIR_MOVED
\family default
 and 
\family typewriter
DROPPED_EVENTS
\family default
.
 The last 2 events are only triggered for inotify and FSEvents.
\begin_inset Newline newline
\end_inset

A persistent mode is also supported, in which all metadata is stored in
 a database.
 This allows you to even track changes when your program was not running.
\end_layout

\begin_layout Standard
As you can see, only 3 
\begin_inset Quotes eld
\end_inset

real
\begin_inset Quotes erd
\end_inset

 events of interest are supported: the most common ones.
 This is because not every API supports all features of the other APIs.
\begin_inset Newline newline
\end_inset

inotify is the most complete in this regard: it supports a boatload of different
 events, on a file-level.
 But it only provides realtime events: it does not maintain a complete history
 of events.
 And that is understandable: it is impossible to maintain a history of 
\emph on
every
\emph default
 file system event.
 Over time, there would not be any space left to store actual data.
\begin_inset Newline newline
\end_inset

FSEvents on the other hand, works on the directory-level, so you have to
 maintain your own directory tree state to detect created, modified and
 deleted files.
 It only triggers a 
\begin_inset Quotes eld
\end_inset

a change has occurred in this directory
\begin_inset Quotes erd
\end_inset

 event.
 This is why for example there is no 
\begin_inset Quotes eld
\end_inset

file moved
\begin_inset Quotes erd
\end_inset

 event: it would be too resource-intensive to detect, or at the very least
 it would not scale.
 On the plus side, FSEvents maintains a complete history of events.
 
\family typewriter
PathScanner
\family default
's 
\family typewriter
scan()
\family default
 method is used to detect the changes to the files in each directory that
 was changed.
\end_layout

\begin_layout Standard
Implementations that do not support file-level events (FSEvents and polling)
 are persistent by design.
 Because the directory tree state must be maintained to be able to trigger
 the correct events, 
\family typewriter
PathScanner
\family default
 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:daemon:modules:pathscanner.py"

\end_inset

) is used for storage.
 They use 
\family typewriter
PathScanner
\family default
's 
\family typewriter
(add|update|remove)_files()
\family default
 functions to keep the database up-to-date.
 And because the entire directory tree state is always stored, you can compare
 the current directory tree state with the stored one to detect changes,
 either as they occur (by being notified of changes on the directory level)
 or as they have occurred (by scanning the directory tree manually).
\end_layout

\begin_layout Standard
For the persistent mode, we could take advantage of 
\family typewriter
FSEvents
\family default
' ability to look back in time.
 However, again due to time constraints, the same approach is used for every
 implementation: a manual scanning procedure – using 
\family typewriter
PathScanner
\family default
 – is started after the file system monitor starts listening for new events
 on a given path.
 That way, no new events are missed.
 This works equally well as using FSEvents' special support for this; it
 is just slower.
 But it is sufficient for now.
 This was not implemented due to time constraints.
\begin_inset Newline newline
\end_inset

To implement this, one would simply need to get the highest 
\family typewriter
mtime
\family default
 (modification time of a file) stored in the database, and then ask 
\family typewriter
FSEvents
\family default
 to send the events from that starting time to our callback function, instead
 of starting from the current time.
\end_layout

\begin_layout Subsubsection
persistent_queue.py and persistent_list.py
\end_layout

\begin_layout Standard
In order to provide data persistency , I wrote a 
\family typewriter
PersistentQueue
\family default
 class and a 
\family typewriter
PersistentList
\family default
 class.
 As their names indicate, these provide you with a persistent queue and
 a persistent list.
 They use again an SQLite database for persistent storage.
 For each instance you create, you must choose the table name and you can
 optionally choose which database file to write to.
 This allows you to group persistent datastructures in a logical manner
 (i.e.
 related persistent datastructures can be stored in the same database file,
 thereby also making it portable and easy to backup).
\end_layout

\begin_layout Standard
To prevent excessive file system access due to an overreliance on SQLite,
 I also added in-memory caching.
 To ensure low resource consumption, only the first X items in 
\family typewriter
PersistentQueue
\family default
 are cached in-memory (a minimum and maximum treshold can be configured),
 but for 
\family typewriter
PersistentList
\family default
 there is no such restriction: it is cached in-memory in its entirety.
 It is not designed for large datasets, but 
\family typewriter
PersistentQeueue
\family default
 is.
\end_layout

\begin_layout Standard

\family typewriter
PersistentQueue
\family default
 is used to store the events that have been triggered by changes in the
 file system via 
\family typewriter
fsmonitory.py
\family default
: 
\family typewriter
(input_file, event)
\family default
 pairs are stored in a persistent queue.
 Because the backlog (especially the one after the initial scan) can become
 very large (imagine 1 million files needing to be synced), this was a necessity.
 
\begin_inset Newline newline
\end_inset


\family typewriter
PersistentList
\family default
 is used to store the files that are currently being processed and the list
 of files that have failed to sync.
 These must also be stored persistently, because if the daemon is interrupted
 while still syncing files, these lists will not be empty, and data could
 be lost.
 Because they are persistent, the daemon can add the files in these lists
 to the queue of files to be synced again, and the files will be synced,
 as if the daemon was never interrupted.
\end_layout

\begin_layout Standard
The first question to arise is: 
\begin_inset Quotes eld
\end_inset

Why use SQLite in favor of Python's built-in 
\family typewriter
shelve
\family default
 module 
\begin_inset CommandInset citation
LatexCommand cite
key "Python shelve"

\end_inset

?
\begin_inset Quotes erd
\end_inset

 Well, the answer is simple: aside from the benefit of the ability to have
 all persistent data in a single file, it must also scale to tens of thousands
 or even millions of files.
 
\family typewriter
shelve
\family default
 is not scalable because its data is loaded into memory in its entirety.
 This could easily result in hundreds of megabytes of memory usage.
 Such excessive memory usage should be avoided at all costs when the target
 environment is a (web) server.
\end_layout

\begin_layout Standard
Your next question would probably be: 
\begin_inset Quotes eld
\end_inset

How can you be sure the SQLite database will not get corrupt?
\begin_inset Quotes erd
\end_inset

 The answer is: we can not.
 But the same applies to Python's 
\family typewriter
shelve
\family default
 module.
 However, the aforementioned advantages of SQLite give plenty of reasons
 to choose SQLite over 
\family typewriter
shelve
\family default
.
 Plus, SQLite is thoroughly tested, even against corruption 
\begin_inset CommandInset citation
LatexCommand cite
key "SQLite testing"

\end_inset

.
 It is also used for very large datasets (it works well for multi-gigabyte
 databases but is not designed for terabyte-scale databases 
\begin_inset CommandInset citation
LatexCommand cite
key "SQLite when to use"

\end_inset

) and by countless companies, amongst which Adobe, Apple, Google, Microsoft
 and Sun 
\begin_inset CommandInset citation
LatexCommand cite
key "SQLite well-known users"

\end_inset

.
 So it is the best bet you can make.
\end_layout

\begin_layout Standard
Finally, you would probably ask 
\begin_inset Quotes eld
\end_inset

Why not use MySQL or PostgreSQL or …?
\begin_inset Quotes erd
\end_inset

.
 Again the answer is brief: because SQLite requires no additional setup
 since it is 
\emph on
serverless
\emph default
, as opposed to MySQL and PostgreSQL.
\end_layout

\begin_layout Standard
Both modules are fully unit-tested and are therefor guaranteed to work flawlessl
y.
\end_layout

\begin_layout Subsubsection
Processors
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:Processors"

\end_inset


\end_layout

\begin_layout Subsubsection*
processor.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:processor.py"

\end_inset


\end_layout

\begin_layout Standard
This module provides several classes: 
\family typewriter
Processor
\family default
, 
\family typewriter
ProcessorChain
\family default
 and 
\family typewriter
ProcessorChainFactory
\family default
.
\end_layout

\begin_layout Standard

\family typewriter
Processor
\family default
 is a base class for processors, which are designed to be easy to write
 yourself.
 Processors receive an input file, do something with it and return the output
 file.
 The 
\family typewriter
Processor
\family default
 class takes a lot of the small annoying tasks on its shoulders, such as
 checking if the file is actually a file this processor can process, calculating
 the default output file and a simple abstraction around an otherwise multi-line
 construction to run a command.
\begin_inset Newline newline
\end_inset

Upon completion, a callback will be called.
 Another callback is called in case of an error.
\begin_inset Newline newline
\end_inset

An example can found in listing 
\begin_inset CommandInset ref
LatexCommand vref
reference "lst:Processors-YUICompressor"

\end_inset

.
 For details, please consult the daemon's documentation.
\end_layout

\begin_layout Standard
Processors are allowed to make any change they want to the file's contents
 and are executed before a file is synced, most often to reduce the size
 of the file and thereby to decrease the page loading time.
\begin_inset Newline newline
\end_inset

They are also allowed to change the base name of the input file, but they're
 not allowed to change its path.
 This measure was taken to reduce the amount of data that needs to be stored
 to know which file is stored where exactly in the database of synced files
 (see later: section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Putting-it-all"

\end_inset

).
 This is enforced 
\emph on
by convention
\emph default
, because in Python it is impossible to truly enforce anything.
 If you do change the path, the file will sync just fine, but it will be
 impossible to delete the old version of a modified file, unless it results
 in the exact same path and base name each time it runs through the processor
 chain.
\end_layout

\begin_layout Standard
The 
\family typewriter
Processor
\family default
 class accepts a parent logger which subclasses can optionally use to perform
 logging.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},float,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class YUICompressor(Processor):
\end_layout

\begin_layout Plain Layout

    """compresses .css and .js files with YUI Compressor"""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    valid_extensions = (".css", ".js")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def run(self):
\end_layout

\begin_layout Plain Layout

        # We do not rename the file, so we can use the default output file.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # Remove the output file if it already exists, otherwise YUI
\end_layout

\begin_layout Plain Layout

        # Compressor will fail.
\end_layout

\begin_layout Plain Layout

        if os.path.exists(self.output_file):
\end_layout

\begin_layout Plain Layout

            os.remove(self.output_file)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # Run YUI Compressor on the file.
\end_layout

\begin_layout Plain Layout

        yuicompressor_path = os.path.join(self.processors_path, "yuicompressor.jar")
\end_layout

\begin_layout Plain Layout

        args = (yuicompressor_path, self.input_file, self.output_file)
\end_layout

\begin_layout Plain Layout

        (stdout, stderr) = self.run_command("java -jar %s %s -o %s" % args)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # Raise an exception if an error occurred.
\end_layout

\begin_layout Plain Layout

        if not stderr == "":
\end_layout

\begin_layout Plain Layout

            raise ProcessorError(stderr)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        return self.output_file
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout

\family typewriter
YUICompressor
\family default
 Processor class.
\begin_inset CommandInset label
LatexCommand label
name "lst:Processors-YUICompressor"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then there is the 
\family typewriter
ProcessorChain
\family default
 class, which receives a list of processors and then runs them as a chain:
 the output file of processor one is the input file of processor two, and
 so on.
 
\family typewriter
ProcessorChains
\family default
 run in their own threads.
 
\family typewriter
ProcessorChain
\family default
 also supports logging and accepts a parent logger.
\end_layout

\begin_layout Standard
There are two special exceptions Processor subclasses can throw:
\end_layout

\begin_layout Enumerate

\family typewriter
RequestToRequeueException
\family default
: when raised, the 
\family typewriter
ProcessorChain
\family default
 will stop processing this file and will pretend the processing failed.
 This effectively means that the file will be reprocessed later.
 A sample use case is the 
\family typewriter
CSSURLUpdater
\family default
 class (described later on in this section), in which the URLs of a CSS
 file must be updated to point to the corresponding URLs of the files on
 the CDN.
 But if not all of these files have been synced already, that is impossible.
 So it must be retried later.
\end_layout

\begin_layout Enumerate

\family typewriter
DocumentRootAndBasePathRequiredException
\family default
: when raised, the 
\family typewriter
ProcessorChain
\family default
 will stop applying the processor that raised this exception to this file,
 because the source to which this file belongs, did not have these attributes
 set and therefor it cannot be applied.
\end_layout

\begin_layout Standard
Finally, 
\family typewriter
ProcessorChainFactory
\family default
: this is simply a factory that generates 
\family typewriter
ProcessorChain
\family default
 objects, with some parameters already filled out.
\end_layout

\begin_layout Subsubsection*
filename.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:filename.py"

\end_inset


\end_layout

\begin_layout Standard
This processor module provides two processor classes: 
\family typewriter
SpacesToUnderscores
\family default
 and 
\family typewriter
SpacesToDashes
\family default
.
 They respectively replace spaces with underscores and spaces with dashes
 in the base name of the file.
\end_layout

\begin_layout Standard
This one is not very useful, but it is a good simple example.
\end_layout

\begin_layout Subsubsection*
unique_filename.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:unique_filename.py"

\end_inset


\end_layout

\begin_layout Standard
Also in this processor module, two processor classes are provided: 
\family typewriter
Mtime
\family default
 and 
\family typewriter
MD5
\family default
.
 MTime appends the mtime (last modification time) as a UNIX timestamp to
 the file's base name (preceded by an underscore).
 MD5 does the same, but instead of the mtime, it appends the MD5 hash of
 the file to the file's base name.
\end_layout

\begin_layout Standard
This processor is useful if you want to ensure that files have unique filenames,
 so that they can be given far future Expires headers (see section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand vref
reference "sec:The-State-of-Drupal"

\end_inset

).
\end_layout

\begin_layout Subsubsection*
image_optimizer.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:image_optimizer.py"

\end_inset


\end_layout

\begin_layout Standard
This processor module is inspired by 
\begin_inset CommandInset citation
LatexCommand cite
key "smush.it"

\end_inset

.
 It optimizes images losslessly, i.e.
 it reduces the filesize without touching the quality.
 The research necessary was not performed by me, but by Stoyan Stefanov,
 a Yahoo! web developer working for the Exceptional Performance team, and
 was thoroughly laid out in a series of blog posts 
\begin_inset CommandInset citation
LatexCommand cite
key "imageopt-1,imageopt-2,imageopt-3,imageopt-4"

\end_inset

 at the Yahoo! user interface blog.
\end_layout

\begin_layout Standard
For GIF files, a conversion to PNG8 is performed using ImageMagick's 
\begin_inset CommandInset citation
LatexCommand cite
key "ImageMagick"

\end_inset

 
\family typewriter
convert
\family default
.
 PNG8 offers lossless image quality, as does GIF, but results in a smaller
 file size.
 PNG8 is also supported in all browsers, including IE6.
 The alpha channels of truecolor PNG (PNG24 & PNG32) are not supported in
 IE6.
\end_layout

\begin_layout Standard
PNG files are stored in so-called 
\begin_inset Quotes eld
\end_inset

chunks
\begin_inset Quotes erd
\end_inset

 and not all of these are required to display the image – in fact, most
 of them are not used at all.
 
\family typewriter
pngcrush
\family default
 
\begin_inset CommandInset citation
LatexCommand cite
key "pngcrush"

\end_inset

 is used to strip all the unneeded chunks.
 
\family typewriter
pngcrush
\family default
 is also applied to the PNG8 files that are generated by the previous step.
 I decided not to use the brute force method, which tries over a hundred
 different methods for optimization, but just the 10 most common ones.
 The brute force method would result in 30 seconds of processing versus
 less than a second otherwise.
\end_layout

\begin_layout Standard
JPEG files can be optimized in three complementary ways: stripping metadata,
 optimizing the Huffman tables and making them progressive.
 There are two variations to store a JPEG file: baseline and progressive.
 A baseline JPEG file is stored as one top-to-bottom scan, whereas a progressive
 JPEG file is stored as a series of scans, with each scan gradually improving
 the quality of the overall image.
 Stoyan Stefanov's tests 
\begin_inset CommandInset citation
LatexCommand cite
key "imageopt-4"

\end_inset

 have pointed out that there is a 75% chance that the JPEG file is best
 saved as baseline when it is smaller than 10 KB.
 For JPEG files larger than 10 KB, it is 94% likely that progressive JPEG
 will result in a better compression ratio.
 That is why the third optimization (making JPEG files progressive) is only
 applied when the file is larger than 10 KB.
 All these optimizations are applied using jpegtran 
\begin_inset CommandInset citation
LatexCommand cite
key "jpegtran"

\end_inset

.
\end_layout

\begin_layout Standard
Finally, animated GIF files can be optimized by stripping the pixels from
 each frame that do not change from the previous to the next frame.
 I use gifsicle 
\begin_inset CommandInset citation
LatexCommand cite
key "gifsicle"

\end_inset

 to achieve that.
\end_layout

\begin_layout Standard
There is one important nuance though: stripping metadata may also remove
 the copyright information, which may have legal consequences.
 So it is not recommended to strip metadata when some of the photos being
 hosted have been bought, which may be the situation for a newspaper web
 site, for example.
\end_layout

\begin_layout Standard
Now that you know how the optimizations are done, here is the overview of
 all processor classes that this processor module provides:
\end_layout

\begin_layout Enumerate

\family typewriter
Max
\family default
 optimizes image files losslessly (GIF, PNG, JPEG, animated GIF)
\end_layout

\begin_layout Enumerate

\family typewriter
KeepMetadata
\family default
 same as 
\family typewriter
Max
\family default
, but keeps JPEG metadata
\end_layout

\begin_layout Enumerate

\family typewriter
KeepFilename
\family default
 same as 
\family typewriter
Max
\family default
, but keeps the original filename (no GIF optimization)
\end_layout

\begin_layout Enumerate

\family typewriter
KeepMetadataAndFilename
\family default
 same as 
\family typewriter
Max
\family default
, but keeps JPEG metadata and the original filename (no GIF optimization)
\end_layout

\begin_layout Subsubsection*
link_updater.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:link_updater.py"

\end_inset


\end_layout

\begin_layout Standard
Thanks to this processor module, it is possible to serve CSS files from
 a CDN while updating the URLs in the CSS file to reference the new URLs
 of these files, that is, the URLs of the synced files.
 It provides a sole processor class: 
\family typewriter
CSSURLUpdater
\family default
.
 This processor class should 
\emph on
only 
\emph default
be used when 
\emph on
either
\emph default
 of these conditions are true:
\end_layout

\begin_layout Itemize
The base path of the URLs changes and the CSS file uses relative URLs that
 are relative to the document root to reference images (or other media).
\begin_inset Newline newline
\end_inset

For example:
\family typewriter

\begin_inset Newline newline
\end_inset


\family default

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Itemize

\family typewriter
http://example.com/static/css/style.css
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

becomes
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Itemize

\family typewriter
http://cdn.com/example.com/static/css/style.css
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

and its referenced file
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Itemize

\family typewriter
http://example.com/static/images/background.png
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

becomes
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Itemize

\family typewriter
http://cdn.com/example.com/static/images/background.png
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

after syncing.
 If the 
\family typewriter
style.css
\family default
 file on the original server references 
\family typewriter
background.png
\family default
 through the relative URL 
\family typewriter
/static/images/background.png
\family default
, then the 
\family typewriter
CSSURLUpdater
\family default
 processor must be used to update the URL.
 Otherwise this relative URL would become invalid, since the correct relative
 URL for the CSS file on the CDN to reference has changed (because the base
 path has changed).
\end_layout

\begin_layout Itemize
The base names of the referenced files changes.
\begin_inset Newline newline
\end_inset

For example
\family typewriter
:
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Itemize

\family typewriter
http://example.com/static/css/style.css
\end_layout

\end_inset


\family default

\begin_inset Newline newline
\end_inset

becomes
\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Itemize

\family typewriter
http://cdn.com/example.com/static/css/style_1242440815.css
\end_layout

\end_inset


\family typewriter

\begin_inset Newline newline
\end_inset


\family default
and its referenced file
\begin_inset Newline newline
\end_inset


\family typewriter

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Itemize

\family typewriter
http://example.com/static/images/background.png
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\family default
becomes
\family typewriter

\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Itemize

\family typewriter
http://cdn.com/static/images/background_1242440827.png
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\family default
after syncing.
 Then it must always use 
\family typewriter
CSSURLUpdater
\family default
.
 Otherwise the URL would become invalid, as the file's base name has changed.
\end_layout

\begin_layout Standard

\family typewriter
CSSURLUpdater
\family default
 uses the cssutils
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "cssutils"

\end_inset

 Python module to parse CSS files.
 This unfortunately also negatively impacts its performance, because it
 validates the CSS file while tokenizing it.
 But as this will become open source, others will surely improve this.
 A possibility is to use regular expressions instead to filter out the URLs.
\end_layout

\begin_layout Standard
All 
\family typewriter
CSSURLUpdater
\family default
 does is resolving relative URLs (relative to the CSS file or relative to
 the document root) to absolute paths on the file system, then looking up
 the corresponding URLs on the CDN and placing those instead in the CSS
 file.
 If one of the referenced files cannot be found on the file system, this
 URL remains unchanged.
 If one of the referenced files has not yet been synced to the CDN, then
 a 
\family typewriter
RequestToRequeueException
\family default
 exception will be raised (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:daemon:modules:processor.py"

\end_inset

) so that another attempt will be made later, when hopefully all referenced
 files have been synced.
\begin_inset Newline newline
\end_inset

For details, see the daemon's documentation.
\end_layout

\begin_layout Subsubsection*
yui_compressor.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:yui_compressor.py"

\end_inset


\end_layout

\begin_layout Standard
This is the processor module that could be seen in listing 
\begin_inset CommandInset ref
LatexCommand vref
reference "lst:Processors-YUICompressor"

\end_inset

.
 It accepts CSS and JS files and runs the YUI Compressor
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "YUI Compressor"

\end_inset

 on them, which are then compressed by stripping out all whitespace and
 comments.
 For JavaScript, it relies on Rhino
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Rhino"

\end_inset

 to tokenize the JavaScript source, so it is very safe: it will not strip
 out whitespace where that could potentially cause problems.
 Thanks to this, it can also optimize more aggressively: it saves over 20%
 more than JSMIN
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "JSMIN"

\end_inset

.
 For CSS (which is supported since version 2.0) it uses a regular-expression
 based CSS minifier.
\end_layout

\begin_layout Subsubsection
Transporters
\begin_inset CommandInset label
LatexCommand label
name "sub:daemonTransporters"

\end_inset


\end_layout

\begin_layout Subsubsection*
transporter.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:transporter.py"

\end_inset


\end_layout

\begin_layout Standard
Each transporter is a persistent connection to a server via a certain protocol
 (FTP, SCP, SSH, or custom protocols such as Amazon S3, any protocol really)
 that is running in its own thread.
 It allows you to queue files to be synced (save or delete) to the server.
\begin_inset Newline newline
\end_inset


\family typewriter
Transporter
\family default
 is a base class for transporters, which are in turn very (very!) thin wrappers
 around custom Django storage systems 
\begin_inset CommandInset citation
LatexCommand cite
key "Django custom storage system"

\end_inset

.
 If you need support for another storage system, you should write a custom
 Django storage system first.
 Transporters' settings are automatically validated in the constructor.
 Also in the constructor, an attempt is made to set up a connection to their
 target server.
 When that fails, an exception (
\family typewriter
ConnectionError
\family default
) is raised.
 Files can be queued for synchronization through the 
\family typewriter
sync_file(src, dst, action, callback, error_callback)
\family default
 method.
\begin_inset Newline newline
\end_inset

Upon completion, the 
\family typewriter
callback
\family default
 function will be called.
 The 
\family typewriter
error_callback
\family default
 function is called in case of an error.
\begin_inset Newline newline
\end_inset


\family typewriter
Transporter
\family default
 also supports logging and accepts a parent logger.
\begin_inset Newline newline
\end_inset

A sample transporter can found in listing 
\begin_inset CommandInset ref
LatexCommand vref
reference "lst:Transporters-TransporterFTP"

\end_inset

.
 For details, please consult the daemon's documentation.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},float,tabsize=4"
inline false
status open

\begin_layout Plain Layout

class TransporterFTP(Transporter):
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    name              = 'FTP'
\end_layout

\begin_layout Plain Layout

    valid_settings    = ImmutableSet(["host", "username", "password", "url",
 "port", "path"])
\end_layout

\begin_layout Plain Layout

    required_settings = ImmutableSet(["host", "username", "password", "url"])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def __init__(self, settings, callback, error_callback, parent_logger=None):
\end_layout

\begin_layout Plain Layout

        Transporter.__init__(self, settings, callback, error_callback, parent_log
ger)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # Fill out defaults if necessary.
\end_layout

\begin_layout Plain Layout

        configured_settings = Set(self.settings.keys())
\end_layout

\begin_layout Plain Layout

        if not "port" in configured_settings:
\end_layout

\begin_layout Plain Layout

            self.settings["port"] = 21
\end_layout

\begin_layout Plain Layout

        if not "path" in configured_settings:
\end_layout

\begin_layout Plain Layout

            self.settings["path"] = ""
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # Map the settings to the format expected by FTPStorage.
\end_layout

\begin_layout Plain Layout

        location = "ftp://" + self.settings["username"] + ":"
\end_layout

\begin_layout Plain Layout

        location += self.settings["password"] + "@" + self.settings["host"]
\end_layout

\begin_layout Plain Layout

        location += ":" + str(self.settings["port"]) + self.settings["path"]
\end_layout

\begin_layout Plain Layout

        self.storage = FTPStorage(location, self.settings["url"])
\end_layout

\begin_layout Plain Layout

        try:
\end_layout

\begin_layout Plain Layout

            self.storage._start_connection()
\end_layout

\begin_layout Plain Layout

        except Exception, e:
\end_layout

\begin_layout Plain Layout

            raise ConnectionError(e)
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout

\family typewriter
TransporterFTP
\family default
 Transporter class.
\begin_inset CommandInset label
LatexCommand label
name "lst:Transporters-TransporterFTP"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Django is a high-level Python Web framework that encourages rapid development
 and clean, pragmatic design.
 It's growing very strong in popularity.
 It is very different from Drupal, which aims to be both a CMS (install
 it and you have a working web site) and a framework.
 Django just aims to be a framework.
 It has APIs for many things, ranging from caching, datababase abstraction,
 forms to sessions, syndication, authentication and of course storage systems.
 I've extract that single API (and its dependencies) from Django and am
 reusing it.
\end_layout

\begin_layout Standard
Now, why the dependency on Django's 
\family typewriter
Storage
\family default
 class? For three reasons:
\end_layout

\begin_layout Enumerate
Since Django is a well-known, widely used open source project with many
 developers and is powering many web sites, it is fair to assume that the
 API is stable and solid.
 Reinventing the wheel is meaningless and will just introduce more bugs.
\end_layout

\begin_layout Enumerate
Because the daemon relies on (unmodified!) Django code, it can benefit from
 bugfixes/features applied to Django's code and can use custom storage systems
 written for Django.
 The opposite is also true: changes made by contributors to the daemon (and
 initially myself) can be contributed back to Django and its contributed
 custom storage systems.
\end_layout

\begin_layout Enumerate
django-storages 
\begin_inset CommandInset citation
LatexCommand cite
key "django-storages"

\end_inset

 is a collection of custom storage systems, which includes these classes:
\end_layout

\begin_deeper
\begin_layout Enumerate

\family typewriter
DatabaseStorage
\family default
: store files in the database (any database that Django supports (MySQL,
 PostgreSQL, SQLite and Oracle)
\end_layout

\begin_layout Enumerate

\family typewriter
MogileFSStorage
\family default
; MogileFS
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "MogileFS"

\end_inset

 is an open source distributed file system
\end_layout

\begin_layout Enumerate

\family typewriter
CouchDBStorage
\family default
; Apache
\begin_inset space ~
\end_inset

CouchDB
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "CouchDB"

\end_inset

 is a distributed, fault-tolerant and schema-free document-oriented database
 accessible via a RESTful HTTP/JSON API
\end_layout

\begin_layout Enumerate

\family typewriter
S3Storage
\family default
; uses the official Amazon S3 Python module
\end_layout

\begin_layout Enumerate

\family typewriter
S3BotoStorage
\family default
; uses the boto
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "boto"

\end_inset

 module to access Amazon S3
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Amazon S3"

\end_inset

 and Amazon CloudFront
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Amazon CloudFront"

\end_inset


\end_layout

\begin_layout Enumerate

\family typewriter
FTPStorage
\family default
; uses the 
\family typewriter
ftplib
\family default
 Python module
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ftplib"

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
For the last two, transporters are available.
 The first three are not so widely used and thus not yet implemented, although
 it would be very easy to support them, exactly because all that is necessary,
 is to write thin wrappers.
 The fourth is not very meaningful to use, since the fifth is better (better
 maintained and higher performance).
\end_layout

\begin_layout Standard
So I clearly managed to make a big shortcut (for simplicity of the argument,
 I'm waving away the fact that I had to get this to work outside of Django
 itself) to achieve my goal: supporting CDNs that rely on FTP or origin
 pulling (see section 
\begin_inset CommandInset ref
LatexCommand vref
reference "sec:Key-Properties-CDN"

\end_inset

), as well as the Amazon S3 and Amazon CloudFront CDNs.
\end_layout

\begin_layout Standard
However, supporting origin pull was trickier than would seem at first.
 Normally, you just rewrite your URLs and be done with it.
 However, I wanted to support processing files prior to syncing them to
 the CDN.
 And I want to keep following the 
\begin_inset Quotes eld
\end_inset

do not touch the original file
\begin_inset Quotes erd
\end_inset

 rule.
 With push, that is no problem, you just process the file, store the output
 file in a temporary directory, push the file and delete it afterwards.
 But what about pull?
\begin_inset Newline newline
\end_inset

I had to be creative here.
 Since files must remain available for origin pull (in case the CDN wants/needs
 to update its copy), all files must be copied to another publicly accessible
 path in the web site.
 But what about files that are not modified? Or have just changed filenames
 (for unique URLs)? Copying these means storing the exact same data twice.
 The answer is fortunately very simple: symlinks.
 Although available only on UNIX, it is very much worth it: it reduces redundant
 data storage significantly.
 This was then implemented in a new custom storage system: 
\family typewriter
SymlinkOrCopyStorage
\family default
, which copies modified files and symlinks unmodified ones.
\end_layout

\begin_layout Standard
In total, I have contributed three patches to django-storages:
\end_layout

\begin_layout Enumerate

\family typewriter
FTPStorage
\family default
: saving large files + more robust 
\family typewriter
exists()
\begin_inset CommandInset citation
LatexCommand cite
key "django-storages FTPStorage patch"

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
It enables the saving of large files by no longer reading all the chunks
 of the file in a single string.
 Instead it uses 
\family typewriter
ftplib.storbinary()
\family default
 directly with a file pointer, which then handles the writing in chunks
 automatically.
\end_layout

\begin_layout Enumerate
It makes 
\family typewriter
exists()
\family default
 more reliable: it has been tested with two different FTP servers and so
 far it works without problems with the following FTP servers, whereas it
 did not work with any of them before:
\end_layout

\begin_deeper
\begin_layout Enumerate
Xlight FTP Server 3.2 (used by SimpleCDN)
\end_layout

\begin_layout Enumerate
Pure-FTPd (used by Rambla)
\end_layout

\begin_layout Standard
This improves the number of use cases where you can use the 
\family typewriter
FTPStorage
\family default
 custom storage system.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate

\family typewriter
S3BotoStorage
\family default
: set 
\family typewriter
Content-Type
\family default
 header, fixed the setting of permissions, use HTTP and disable query auth
 by default 
\begin_inset CommandInset citation
LatexCommand cite
key "django-storages S3BotoStorage patch"

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
The 
\family typewriter
Content-Type
\family default
 header is set automatically via guessing based on the extension.
 This is done through mimetypes.guesstype.
 Right now, no Content-Type is set, and therefor the default binary mimetype
 is set: application/octet- stream.
 This causes browsers to download files instead of displaying them.
\end_layout

\begin_layout Enumerate
The ACL (i.e.
 file permissions) now actually gets applied properly to the bucket and
 to each file that is saved to the bucket.
\end_layout

\begin_layout Enumerate
Currently, URLs are generated with query-based authentication (which implies
 ridiculously long URLs will be generated) and HTTPS is used instead of
 HTTP, thereby preventing browsers from caching files.
 I have disabled query authentication and HTTPS, as this is the most common
 use case for serving files.
 This probably should be configurable, but that can be done in a revised
 patch or a follow-up patch.
\end_layout

\begin_layout Enumerate
It allows you to set custom headers through the constructor (which I really
 needed for my daemon).
\end_layout

\begin_layout Standard
This greatly improves the usability of the 
\family typewriter
S3BotoStorage
\family default
 custom storage system in its most common use case: as a CDN for publicly
 accessible files.
 
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
SymlinkOrCopyStorage
\family default
: new custom storage system 
\begin_inset CommandInset citation
LatexCommand cite
key "django-storages SymlinkOrCopyStorage patch"

\end_inset


\end_layout

\begin_layout Standard
The maintainer was very receptive to these patches and replied a mere 23
 minutes after I contacted him (via Twitter): 
\end_layout

\begin_layout Quote
davidbgk@wimleers Impressive patches, I'll merge your work asap.
 Thanks for contributing! Interesing bachelor thesis :)
\end_layout

\begin_layout Standard
The patches were submitted on May 14, 2009.
 The first and third patch were committed on May 17, 2009.
 The second patch needs a bit more work (more configurable, less hard coded,
 which it already was though).
 The fact that another new storage system was also added (Apache CouchDB)
 seems to indicate that I made a good choice: this project seems to be pretty
 active and is gaining attention.
\end_layout

\begin_layout Subsubsection*
transporter_ftp.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:transporter_ftp.py"

\end_inset


\end_layout

\begin_layout Standard
Provides the 
\family typewriter
TransporterFTP
\family default
 class, which is a thin wrapper around 
\family typewriter
FTPStorage
\family default
, with the aforementioned patch applied.
\end_layout

\begin_layout Subsubsection*
transporter_s3.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:transporter_s3.py"

\end_inset


\end_layout

\begin_layout Standard
Provides the 
\family typewriter
TransporterS3
\family default
 class, which is a thin wrapper around 
\family typewriter
S3BotoStorage
\family default
, with the aforementioned patch applied.
\end_layout

\begin_layout Subsubsection*
transporter_cf.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:transporter_cf.py"

\end_inset


\end_layout

\begin_layout Standard
Provides the 
\family typewriter
TransporterCF
\family default
 class, which is not a thin wrapper around 
\family typewriter
S3BotoStorage
\family default
, but around 
\family typewriter
TransporterS3
\family default
.
 In fact, it just implementes the 
\family typewriter
alter_url()
\family default
 method to alter the Amazon S3 URL to an Amazon CloudFront URL (see section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Key-Properties-CDN"

\end_inset

).
\end_layout

\begin_layout Standard
It also provides the 
\family typewriter
create_distribution()
\family default
 function to create a distribution for a given origin domain (a domain for
 a specific Amazon S3 bucket).
 Please consult the daemon's documentation for details.
\end_layout

\begin_layout Subsubsection*
transporter_symlink_or_copy.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:transporter_symlink_or_copy.py"

\end_inset


\end_layout

\begin_layout Standard
Provides the 
\family typewriter
TransporterSymlinkOrCopy
\family default
 class, which is a thin wrapper around 
\family typewriter
SymlinkOrCopyStorage
\family default
, which is a new custom storage system I contributed to django-storages,
 as mentioned before.
\end_layout

\begin_layout Subsubsection
config.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:config.py"

\end_inset


\end_layout

\begin_layout Standard
This module contains just one class: 
\family typewriter
Config
\family default
.
 
\family typewriter
Config
\family default
 can load a configuration file (parse the XML) and validate it.
 Validation does not happen through an XML schema, but through 
\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 validation.
 The 
\family typewriter
filter
\family default
 node is validated through the 
\family typewriter
Filter
\family default
 class to ensure it is error free (a 
\family typewriter
Filter
\family default
 object is created and the conditions from the 
\family typewriter
filter
\family default
 node are set and when no exceptions are raised, the conditions are valid).
 All references (to sources and servers) are also validated.
 Its validation routines are pretty thorough, but by no means perfect.
\begin_inset Newline newline
\end_inset


\family typewriter
Config
\family default
 also supports logging and accepts a parent logger.
\end_layout

\begin_layout Standard
This module should be unit tested, but is not – yet.
\end_layout

\begin_layout Subsubsection
daemon_thread_runner.py
\begin_inset CommandInset label
LatexCommand label
name "sub:daemon:modules:daemon_thread_runner.py"

\end_inset


\end_layout

\begin_layout Standard
I needed to be able to run the application as a daemon.
 Great, but then how do you stop it? Through signals.
 That is also how for example the Apache HTTP server does it 
\begin_inset CommandInset citation
LatexCommand cite
key "Apache signals"

\end_inset

.
 To send a signal, you need to know the process' pid (process id).
 So the pid must be stored in a file somewhere.
\end_layout

\begin_layout Standard
This module contains the 
\family typewriter
DaemonThreadRunner
\family default
 class, which accepts an object and the name of the file that should contain
 the pid.
 The object should be a subclass of Python's 
\family typewriter
threading.Thread
\family default
 class.
 As soon as you 
\family typewriter
start()
\family default
 the 
\family typewriter
DaemonThreadRunner
\family default
 object, the pid will be written to the specified pid file name, the object
 will be marked as a daemon thread and started.
 While it is running, the pid is written to the pid file every sixty seconds,
 in case the file is deleted accidentally.
\end_layout

\begin_layout Standard
When an interrupt is caught (
\family typewriter
SIGINT
\family default
 for interruption, 
\family typewriter
SIGTSTP
\family default
 for suspension and 
\family typewriter
SIGTERM
\family default
 for termination), the thread (of the object that was passed) is stopped
 and 
\family typewriter
DaemonThreadRunner
\family default
 waits for the thread to join and then deletes the file.
\end_layout

\begin_layout Standard
This module is not unit tested, because it makes very little sense to do
 so (there is not much code).
 Having used it hundreds of times, it did not fail once, so it is reliable
 enough.
\end_layout

\begin_layout Subsection
Putting it all together: arbitrator.py
\begin_inset CommandInset label
LatexCommand label
name "sub:Putting-it-all"

\end_inset


\end_layout

\begin_layout Subsubsection
The big picture
\end_layout

\begin_layout Standard
The arbitrator is what links together all Python modules I have described
 in the previous section.
 Here is a hierarchical overview, so you get a better understanding of the
 big picture:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename schemas/the big picture.png
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The big picture
\begin_inset CommandInset label
LatexCommand label
name "fig:daemonThe-Big-Picture"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Clearly, 
\family typewriter
Arbitrator
\family default
 is what links everything together: it controls the 5 components: 
\family typewriter
Config
\family default
, 
\family typewriter
FSMonitor
\family default
, 
\family typewriter
Filter
\family default
, 
\family typewriter
Processor
\family default
 and 
\family typewriter
Transporter
\family default
.
 There are three subclasses of 
\family typewriter
FSMonitor
\family default
 to take advantage of the platform's built-in file system monitor.
 
\family typewriter
Processor
\family default
 must be subclassed for every processor.
 
\family typewriter
Transporter
\family default
 must be subclassed for each protocol.
\end_layout

\begin_layout Standard
Now that you have an insight in the big picture, let's examine how exactly
 
\family typewriter
Arbitrator
\family default
 controls all components, and what happens before the 
\family typewriter
main
\family default
 function.
\end_layout

\begin_layout Subsubsection
The flow
\end_layout

\begin_layout Standard
First, an 
\family typewriter
Arbitrator
\family default
 object is created and its constructor does the following:
\end_layout

\begin_layout Itemize
create a logger
\end_layout

\begin_layout Itemize
parse the configuration file
\end_layout

\begin_layout Itemize
verify the existence of all processors and transporters that are referenced
 from the configuration file
\end_layout

\begin_layout Itemize
connect to each server (as defined in the configuration file) to ensure
 it is working
\end_layout

\begin_layout Standard
Then, the 
\family typewriter
Arbitrator
\family default
 object is passed to a 
\family typewriter
DaemonThreadRunner
\family default
 object, which then runs the arbitrator in such a way that it can be stopped
 through signals.
 The arbitrator is then started.
 The following happens:
\end_layout

\begin_layout Enumerate
setup
\end_layout

\begin_deeper
\begin_layout Enumerate
create transporter pools (analogous to worker thread pools) for each server.
 These pools remain empty until transporters are necessary, because transporters
 are created whenever they are deemed necessary.
\end_layout

\begin_layout Enumerate
collect all metadata for each rule
\end_layout

\begin_layout Enumerate
initialize all datastructures for the pipeline (queues, persistent queues
 and persistent lists)
\end_layout

\begin_layout Enumerate
move files from the 'files in pipeline' persistent list to the 'pipeline'
 persistent queue
\end_layout

\begin_layout Enumerate
move files from the 'failed files' persistent list to the 'pipeline' persistent
 queue
\end_layout

\begin_layout Enumerate
create a database connection to the 'synced files' database
\end_layout

\begin_layout Enumerate
initialize the file system monitor (
\family typewriter
FSMonitor
\family default
)
\end_layout

\end_deeper
\begin_layout Enumerate
run
\end_layout

\begin_deeper
\begin_layout Enumerate
start the file system monitor
\end_layout

\begin_layout Enumerate
start the processing loop and keep it running until the thread is being
 stopped
\end_layout

\begin_deeper
\begin_layout Enumerate
process the 
\emph on
discover
\emph default
 queue
\end_layout

\begin_layout Enumerate
process the 
\emph on
pipeline
\emph default
 queue
\end_layout

\begin_layout Enumerate
process the 
\emph on
filter
\emph default
 queue
\end_layout

\begin_layout Enumerate
process the 
\emph on
process
\emph default
 queue
\end_layout

\begin_layout Enumerate
process the 
\emph on
transport
\emph default
 queues (1 per server)
\end_layout

\begin_layout Enumerate
process the 
\emph on
db
\emph default
 queue
\end_layout

\begin_layout Enumerate
process the 
\emph on
retry
\emph default
 queue
\end_layout

\begin_layout Enumerate
allow retry (move files from the 'failed files' persistent list to the 'pipeline
' persistent queue)
\end_layout

\begin_layout Enumerate
sleep 0.2 seconds
\end_layout

\end_deeper
\begin_layout Enumerate
stop the file system monitor
\end_layout

\begin_layout Enumerate
process the discover queue once more to sync the final batch of files to
 the persistent pipeline queue
\end_layout

\begin_layout Enumerate
stop all transporters
\end_layout

\begin_layout Enumerate
log some statistics
\end_layout

\end_deeper
\begin_layout Standard
That is 
\emph on
roughly
\emph default
 the logic of the daemon.
 It should already make some sense, but it's likely that it is not yet clear
 what all the queues are for.
 And how they are being filled and emptied.
 So now it is time to learn about the daemon's 
\emph on
pipeline
\emph default
.
\end_layout

\begin_layout Subsubsection
Pipeline design pattern
\end_layout

\begin_layout Standard
This design pattern, which is also sometimes called 
\begin_inset Quotes eld
\end_inset

Filters and Pipes
\begin_inset Quotes erd
\end_inset


\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "pipes-and-filters-1,pipes-and-filters-2,pipes-and-filters-3,pipes-and-filters-4"

\end_inset

, is slightly underdocumented, but it is still a very useful design pattern.
 Its premise is to deliver an architecture to divide a large processing
 task into smaller, sequential steps (
\begin_inset Quotes eld
\end_inset

Filters
\begin_inset Quotes erd
\end_inset

) that can be performed independently – and therefor in parallel – which
 are finally connected via Pipes.
 The output of one step is the input of the next.
\end_layout

\begin_layout Standard
For all that follows in this subsection, you may want to look at figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:daemon:flowchart-pipeline"

\end_inset

 while reading.
 Note that this figure does not contain every detail: it is intended to
 help you gain some insight into how the daemon works, not how every detail
 is implemented.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename /Users/wimleers/School/thesis/svn/doc/schemas/daemon final flowchart.png
	width 115text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Flowchart of the daemon's pipeline.
\begin_inset CommandInset label
LatexCommand label
name "fig:daemon:flowchart-pipeline"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In my case, files are discovered and are then put into the pipeline queue.
 When they actually move into the pipeline (at which point they are added
 to the 'files in pipeline' persistent list), they start by going into the
 filter queue, after being filtered they go into the process queue (possibly
 more than once), after being processed to the transport queue (again possibly
 more than once), after being transported to the db queue, after being stored
 in the database, they are removed from the 'files in pipeline' persistent
 list and we are done for this file.
 Repeat for every discovered file.
 This is the 
\emph on
core logic
\emph default
 of the daemon.
\end_layout

\begin_layout Standard
So many queues are used because there are so many stages in the pipeline.
 There is a queue for each stage in the pipeline, plus some additional ones
 because the persistent datastructures use the pysqlite module, which only
 allows you to access the database from the same thread as the connection
 was created in.
 Because I (have to) work with callbacks, the calling thread may be different
 from the creating thread, and therefor there are several queues that exist
 solely for exchanging data between threads.
\begin_inset Newline newline
\end_inset

There is one persistent queue and two persistent lists.
 The persistent queue is the pipeline queue, which contains all files that
 are queued to be sent through the pipeline.
 The first persistent list is 'files in pipeline'.
 It is used to ensure files still get processed if the daemon was killed
 (or crashed) while they were in the pipeline.
 The second persistent list is 'failed files' and contains all files for
 which either a processor in the processor chain or a transporter failed.
\begin_inset Newline newline
\end_inset

When the daemon is restarted, the contents of the 'files in pipeline' and
 'failed files' lists are pushed into the pipeline queue, after which they
 are erased.
\end_layout

\begin_layout Standard
Queues are either filled through the 
\family typewriter
Arbitrator
\family default
 (because it moves data from one queue to the next):
\end_layout

\begin_layout Itemize
The 
\emph on
pipeline
\emph default
 queue is filled by the 
\begin_inset Quotes eld
\end_inset

process 
\emph on
discover
\emph default
 queue
\begin_inset Quotes erd
\end_inset

 method, which always syncs all files in the discover queue to the pipeline
 queue.
\end_layout

\begin_layout Itemize
The 
\emph on
filter
\emph default
 queue is filled by the 
\begin_inset Quotes eld
\end_inset

process 
\emph on
pipeline
\emph default
 queue
\begin_inset Quotes erd
\end_inset

 method, which processes up to 20 files (this is configurable) in one run,
 or until there are 100 files in the pipeline (this is also configurable),
 whichever limit is hit first.
\end_layout

\begin_layout Itemize
The 
\emph on
process
\emph default
 queue is filled by the 
\begin_inset Quotes eld
\end_inset

process 
\emph on
filter
\emph default
 queue
\begin_inset Quotes erd
\end_inset

 method, which processes up to 20 files in one run.
\end_layout

\begin_layout Standard
or through callbacks (in case data gets processed in a separate thread):
\end_layout

\begin_layout Itemize
The 
\emph on
discover
\emph default
 queue is filled through 
\family typewriter
FSMonitor
\family default
's callback (which gets called for every discovered file).
 
\end_layout

\begin_layout Itemize
The 
\emph on
transport
\emph default
 queue is filled through a 
\family typewriter
ProcessorChain
\family default
's callback or directly from the 
\begin_inset Quotes eld
\end_inset

process 
\emph on
filter
\emph default
 queue
\begin_inset Quotes erd
\end_inset

 method (if the rule has no processor chain associated with it).
 To know when a file has been synced to all its destinations, the 'remaining
 transporters' list gets a new key (the concatenation of the input file,
 the event and the string representation of the rule) and the value of that
 key is a list of all servers to which this file will be synced.
\end_layout

\begin_layout Itemize
The 
\emph on
db
\emph default
 queue is filled through a 
\family typewriter
Transporter
\family default
's callback.
 Each time this callback fires, it also carries information on which server
 the file has just been transported to.
 This server is then removed from the 'remaining transporters' list for
 this file.
 When no servers are left in this list, the sync is complete and the file
 can be removed from the 'files in pipeline' persistent list.
\end_layout

\begin_layout Standard
Because the 
\family typewriter
ProcessorChain
\family default
 and 
\family typewriter
Transporter
\family default
 callbacks only carry information about the file they've just been operating
 on, I had to find an elegant method to transfer the additional metadata
 for this file, which is necessary to let the file continue through the
 pipeline.
 I have found this in the form of currying
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "currying"

\end_inset

.
 Currying is dynamically creating a new function that calls another function,
 but with some arguments already filled out.
 An example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline true
status open

\begin_layout Plain Layout

curried_callback = curry(self.processor_chain_callback, event=event, rule=rule)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function 
\family typewriter
self.processor_chain_callback
\family default
 accepts the 
\family typewriter
event
\family default
 and 
\family typewriter
rule
\family default
 arguments, but the 
\family typewriter
ProcessorChain
\family default
 class has no way of accepting 
\begin_inset Quotes eld
\end_inset

additional data
\begin_inset Quotes erd
\end_inset

 arguments.
 So instead of rewriting 
\family typewriter
ProcessorChain
\family default
 (and the exact same thing applies to 
\family typewriter
Transporter
\family default
), I simply create a curried callback, that will automatically fill out
 the arguments that the 
\family typewriter
ProcessorChain
\family default
 callback by itself could never fill out.
\end_layout

\begin_layout Standard
Each of the 
\begin_inset Quotes eld
\end_inset

process 
\emph on
X
\emph default
 queue
\begin_inset Quotes erd
\end_inset

 methods acquires 
\family typewriter
Arbitrator
\family default
's lock before accessing any of the queues.
 
\emph on
Before
\emph default
 a file is removed from the pipeline queue, it is added to the 'files in
 pipeline' persistent list (this is possible thanks to 
\family typewriter
PersistentQueue
\family default
's 
\family typewriter
peek()
\family default
 method), and then it is removed from the pipeline queue.
 This implies that at no time after the file has been added to the pipeline
 queue, it can be lost.
 The worst case scenario is that the daemon crashes between adding the file
 to the 'files in pipeline' persistent list and removing it from the pipeline
 queue.
 Then it'll end up twice in the queue.
 But the second sync will just overwrite the first one, so all that is lost,
 is CPU time.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

allow retry
\begin_inset Quotes erd
\end_inset

 method allows failed files (in the 'failed files' persistent list) to be
 retried, by adding them back to the pipeline queue.
 This happens whenever the pipeline queue is getting empty, or every 30
 seconds.
 This ensures processors that use the 
\family typewriter
RequestToRequeueException
\family default
 exception can retry.
\end_layout

\begin_layout Standard
The only truly weak link is unavoidable: if the daemon crashes somewhere
 between having performed the callback from 
\family typewriter
FSMonitor
\family default
, adding that file to the discover queue and syncing the file from the discover
 queue to the pipeline queue (which is necessary due to the thread locality
 restriction of pysqlite).
\end_layout

\begin_layout Subsection
Performance tests
\end_layout

\begin_layout Standard
I have performed fairly extensive tests on both Mac OS X and Linux.
 The application behaved identically on both platforms, despite the fact
 that different file system monitors are being used in the background.
 The rest of this problemless cross-platform functioning is thanks to Python.
\end_layout

\begin_layout Standard
All tests were performed on the local network, i.e.
 with a FTP server running on the localhost.
 Very small scale tests have been performed with the Amazon S3 and CloudFront
 transporters, and since they worked, the results should apply to those
 as well.
 It does not and should not matter which transporter is being used.
\end_layout

\begin_layout Standard
At all times, the memory usage remained below 17 MB on Mac OS X and below
 7 MB on Linux (unless the update_linker processor module was used, in which
 case it leaks memory like a madman – the 
\family typewriter
cssutils
\family default
 Python module is to blame).
 A backlag of more than 10,000 files was no problem.
 Synchronizing 10 GB of files was no problem.
 I also tried alot of variations in the configuration and all of them worked
 (well, sometimes it needed some bugfixing of course).
 Further testing should happen in real-world environments.
 Even tests in which I forced processors or transporters to crash were completed
 succesfully: no files were lost and they would be synced again after restarting
 the daemon.
\end_layout

\begin_layout Subsection
Possible further optimizations
\end_layout

\begin_layout Itemize
Files should be moved from the discover queue to the pipeline queue in a
 separate thread, to minimize the risk of losing files due to a crashed
 application before files are moved to the pipeline queue.
 In fact, the discover queue could be eliminitated altogether thanks to
 this.
\end_layout

\begin_layout Itemize
Track progress of transporters and allow them to be be stopped while still
 syncing a file.
\end_layout

\begin_layout Itemize
Make processors more error resistent by allowing them to check the environment,
 so they can ensure third party applications, such as YUI Compressor or
 jpegtran are installed.
\end_layout

\begin_layout Itemize
Figure out an automated way of ensuring the correct operating of processors,
 since they are most likely the cause of problems thanks to the fact that
 users can easily write their own Processors.
\end_layout

\begin_layout Itemize
Automatically copy the synced files DB every X seconds, to prevent long
 delays for read-only clients.
 This will only matter on sites where uploads happen more than once per
 second or so.
\end_layout

\begin_layout Itemize
Reorganize code: make a proper packaged structure.
\end_layout

\begin_layout Itemize
Make the code redistributable: as a Python egg, or maybe even as binaries
 for each supported platform.
\end_layout

\begin_layout Itemize
Automatically stop transporters after a period of idle time.
\end_layout

\begin_layout Subsection
Desired future features
\end_layout

\begin_layout Itemize
Polling the daemon for its current status (number of files in the queue,
 files in the pipeline, processors running, transporters running, et cetera)
\end_layout

\begin_layout Itemize
Support for Munin/Nagios for monitoring (strongly related to the previous
 feature)
\end_layout

\begin_layout Itemize
Ability to limit network usage by more than just the number of connections:
 also by throughput.
\end_layout

\begin_layout Itemize
Ability to limit CPU usage by more than just the number of simultaneous
 processors.
\end_layout

\begin_layout Itemize
Store characteristics of the operations, such as TTS (Time-To-Sync), so
 that you can analyze this data to configure the daemon to better suit your
 needs.
\end_layout

\begin_layout Itemize
Allow server-specific processor chains (i.e.
 run the processor chain once for each server the file will be synced to).
 This allows you to have CSS files that contain URLs rewritten to that specific
 server.
 Right now, you can only have 
\emph on
one 
\emph default
processor chain and therefor the CSS file will always reference the same
 URLs, which may refer to another server.
\end_layout

\begin_layout Itemize
Cache the latest configuration file and compare with the new one.
 If changes occurred to any of the rules, it should detect them on its own
 and do the necessary resyncing.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Improving Drupal: CDN integration
\begin_inset CommandInset label
LatexCommand label
name "sec:CDN-integration"

\end_inset


\end_layout

\begin_layout Standard
It should be obvious by now that we still need a module to integrate Drupal
 with a CDN, as Drupal does not provide such functionality on its own –
 if it did, then this bachelor thesis would be titled differently.
 This is the end of the long journey towards supporting the simplest and
 the most complex CDN or static file server setups one can make.
 Fortunately, this is all fairly trivial, except for maybe the necessary
 Drupal core patch.
\end_layout

\begin_layout Subsection
Goals
\end_layout

\begin_layout Standard
The daemon I wrote is not necessary for Origin Pull CDNs.
 So this module should support those through a simple UI.
 On the other hand, it must also be easy to use the daemon for a Drupal
 web site.
 The former is called 
\emph on
basic mode
\emph default
 and the latter is called
\emph on
 advanced mode
\emph default
, thereby indicating that the latter is more complex to set up (i.e.
 it requires you to set up the daemon).
\begin_inset Newline newline
\end_inset

Here are the goals again, this time in more detail:
\end_layout

\begin_layout Itemize
shared functionality
\end_layout

\begin_deeper
\begin_layout Itemize
ability to show per-page statistics: number of files on the page, number
 of files served from the CDN
\end_layout

\begin_layout Itemize
status report shows if CDN integration is active and displays as a warning
 if it is disabled or in debug mode (to stress the importance of having
 it enabled)
\end_layout

\end_deeper
\begin_layout Itemize
basic mode
\end_layout

\begin_deeper
\begin_layout Itemize
enter the CDN URL and it will be used in file URLs automatically
\end_layout

\begin_layout Itemize
ability to only use the CDN for files with certain extensions
\end_layout

\end_deeper
\begin_layout Itemize
advanced mode
\end_layout

\begin_deeper
\begin_layout Itemize
enter the absolute path to the synced files database and then file URLs
 will be looked up from there automatically
\end_layout

\begin_layout Itemize
status report: check if daemon is running, if not, display the report as
 an error
\end_layout

\begin_layout Itemize
status report: number of synced files, number of files in the pipeline,
 number of files waiting to enter the pipeline
\end_layout

\begin_layout Itemize
per-page statistics: show from which destination the file is being served
\end_layout

\begin_layout Itemize
per-page statistics: show the total and average time spent on querying the
 synced files database
\end_layout

\begin_layout Itemize
ability to decide from which destination a file will be served (if multiple
 destinations for a file are available) based on user properties (user role,
 language, location) or whatever other property
\end_layout

\end_deeper
\begin_layout Subsection
Drupal core patch
\end_layout

\begin_layout Standard
I had the chance to speak to Andrew 
\begin_inset Quotes eld
\end_inset

drewish
\begin_inset Quotes erd
\end_inset

 Morton at DrupalCon DC about the Drupal core patch that is necessary for
 the CDN integration module for Drupal to become possible.
 He is the one who managed to get his proposed Drupal File API patches committed
 to the current development version of Drupal (which will become Drupal
 7).
 So he definitely is the person to go to for all things concerning files
 in Drupal right now.
 I explained to him the need for a unified file URL generation/alteration
 mechanism and he immediately understood and agreed.
\end_layout

\begin_layout Standard
My patch will be against Drupal 6, but the file URL generation mechanism
 is identical in Drupal 7.
 So, my patch should be easy to port to Drupal 7.
\end_layout

\begin_layout Standard
Drupal already has one function to generate file URLs: 
\family typewriter
file_create_url($path)
\family default
.
 Unfortunately, this function is only designed to work for files that have
 been uploaded by users or are generated by modules (e.g.
 transformations of images).
 And now the bad news: there is no function through which the URLs for the
 other files (the ones that are not uploaded but are shipped with Drupal
 core and modules and themes) are generated.
 To be honest, the current method for generating these URLs is very ugly,
 although very simple: prepend the base path to the relative file path.
 So if you want to serve the file 
\family typewriter
misc/jquery.js
\family default
 (which is part of Drupal core), then you would write the following code
 to generate an URL for it:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize}"
inline true
status open

\begin_layout Plain Layout

$url = base_path() .
 'misc/jquery.js';
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Andrew and I agreed that since eventually both kinds of files are typically
 served from the same server(s), it only makes sense to generate their URLs
 through one function.
 So the sensible thing to do was to also route the non-uploaded files through
 the 
\family typewriter
file_create_url()
\family default
 function to generate their URLs.
 And then there would be a function that a module could implement, 
\family typewriter
custom_file_url_rewrite($path)
\family default
 which would then allow file URLs to be altered.
\end_layout

\begin_layout Standard
So, I wrote a Drupal core patch exactly according to these specifications,
 and it works great.
 However, we must fall back to the old mechanisms in case the 
\family typewriter
custom_file_url_rewrite()
\family default
 function returns 
\family typewriter
FALSE
\family default
 (meaning that the CDN cannot or should not serve the file).
 But since there is a distinction between uploaded/generated files and shipping
 files, we must first determine which kind of file it is.
 This can be done by looking at the path that was given to 
\family typewriter
file_create_url()
\family default
: if it begins with the path of the directory that the Drupal administrator
 chose to use for uploaded and generated files, then it is an uploaded/generated
 file.
 After this distinction has been made, the original procedures are applied.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Try to get this into core, write about the results here.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Implementation
\end_layout

\begin_layout Itemize
A simple configuration UI was created using the Forms API
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Drupal Forms API"

\end_inset

.
 Advanced mode cannot be started if the daemon is not configured properly
 yet (by ensuring the synced files database exists).
\end_layout

\begin_layout Itemize
The per-page statistics are rendered through Drupal's 
\family typewriter
hook_exit()
\family default
, which is called just before the end of each page request.
 It is therefor able to render after the rest of the page is rendered, which
 of course implies that all file URLs have been created, so it is safe to
 calculate the statistics.
\end_layout

\begin_layout Itemize
A 
\family typewriter
hook_requirements()
\family default
 implementation was created, which allows me to add information about the
 CDN integration module to Drupal's status report page.
\end_layout

\begin_layout Itemize
The aforementioned 
\family typewriter
custom_file_url_rewrite()
\family default
 function was implemented, which rewrites the URL based on the mode.
 In basic mode, the CDN URL is automatically inserted into file URLs and
 in advanced mode, the synced files database is queried.
 This is an SQLite database, which the Drupal 6 database abstraction layer
 does not support.
 Drupal 7's database abstraction layer does support SQLite, but is still
 in development (and will be for at least 6 more months).
 Fortunately, there is also PDO
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "PDO"

\end_inset

, which makes this sufficiently easy.
\end_layout

\begin_layout Standard
That is all there is to tell about this module.
 It is very simple: all complexity is now embedded in the daemon, as it
 should be.
\end_layout

\begin_layout Subsection
Comparison with the old CDN integration module
\end_layout

\begin_layout Standard
In January 2008, I wrote the initial version of the CDN integration module.
 It was written for Drupal 5 instead of Drupal 6 though and was pure PHP
 code, and thus limited by PHP's constraints.
 It did not support Origin Pull CDNs.
 Instead, it only supported push CDNs that were accessible over FTP.
 The synchronization happened from within Drupal, on each cron run.
 Which means it relied on manual file system scanning (i.e.
 polling) to detect changes and was prevented by design to perform concurrent
 syncs, since PHP cannot do that.
 To top it off, it did not store anything in the database, but in a serialized
 array, which had to be unserialized on every page to retrieve the URLs.
 It should be obvious that this was significantly slower and absolutely
 unscalable and definitely unusable on any 
\emph on
real
\emph default
 web sites out there.
\end_layout

\begin_layout Standard
It had its algorithms right though.
 You could consider it a very faint preview of what the end result looks
 like right now.
\end_layout

\begin_layout Subsection
Screenshots
\end_layout

\begin_layout Subsubsection*
The configuration UI
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/cdn/admin-settings-cdn.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
CDN integration module settings form.
\begin_inset CommandInset label
LatexCommand label
name "fig:CDN-integration-module-settings-form"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/cdn/admin-settings-cdn-basic.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
CDN integration module basic mode settings form.
\begin_inset CommandInset label
LatexCommand label
name "fig:CDN-integration-module-basic-mode-settings-form"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/cdn/admin-settings-cdn-advanced.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
CDN integration module advanced mode settings form.
\begin_inset CommandInset label
LatexCommand label
name "fig:CDN-integration-module-advanced-mode-settings-form"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/cdn/admin-settings-cdn-other.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
CDN integration module other settings form.
\begin_inset CommandInset label
LatexCommand label
name "fig:CDN-integration-module-other-settings-form"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
The status report
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/cdn/status report/basic/enabled.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Status report (basic mode, enabled).
\begin_inset CommandInset label
LatexCommand label
name "fig:status-report-basic-enabled"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/cdn/status report/basic/debug.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Status report (basic mode, debug mode).
\begin_inset CommandInset label
LatexCommand label
name "fig:status-report-basic-debug-mode"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/cdn/status report/disabled.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Status report (disabled).
\begin_inset CommandInset label
LatexCommand label
name "fig:status-report-basic-disabled"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/cdn/status report/advanced/not running.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Status report (advanced mode, enabled, daemon not running).
\begin_inset CommandInset label
LatexCommand label
name "fig:status-report-advanced-enabled-not-running"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/cdn/status report/advanced/running.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Status report (advanced mode, enabled, daemon running).
\begin_inset CommandInset label
LatexCommand label
name "fig:status-report-advanced-enabled-running"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
The per-page statistics
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/cdn/per-page statistics.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Per-page statistics.
\begin_inset CommandInset label
LatexCommand label
name "fig:CDN-integration-module-stats"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Used technologies
\end_layout

\begin_layout Itemize
Languages
\end_layout

\begin_deeper
\begin_layout Itemize
PHP
\end_layout

\begin_layout Itemize
JavaScript
\end_layout

\begin_layout Itemize
Python
\end_layout

\begin_layout Itemize
SQL
\end_layout

\end_deeper
\begin_layout Itemize
Frameworks
\end_layout

\begin_deeper
\begin_layout Itemize
Drupal (Forms API, Batch API, menu system, Schema API, et cetera) 
\end_layout

\begin_layout Itemize
jQuery
\end_layout

\begin_layout Itemize
Episodes 
\begin_inset CommandInset citation
LatexCommand cite
key "Episodes home page"

\end_inset


\end_layout

\begin_layout Itemize
Django's 
\begin_inset CommandInset citation
LatexCommand cite
key "Django"

\end_inset


\family typewriter
 Storage
\family default
 class 
\begin_inset CommandInset citation
LatexCommand cite
key "Django custom storage system"

\end_inset

 and its dependencies
\end_layout

\end_deeper
\begin_layout Itemize
APIs/libraries
\end_layout

\begin_deeper
\begin_layout Itemize
Browser.php 
\begin_inset CommandInset citation
LatexCommand cite
key "Browser.php"

\end_inset


\end_layout

\begin_layout Itemize
Google Chart API 
\begin_inset CommandInset citation
LatexCommand cite
key "Google Chart API"

\end_inset


\end_layout

\begin_layout Itemize
FSEvents 
\begin_inset CommandInset citation
LatexCommand cite
key "FSEvents,FSEvents review"

\end_inset

 (through the Python-Objective-C bridge 
\begin_inset CommandInset citation
LatexCommand cite
key "PyObjC"

\end_inset

)
\end_layout

\begin_layout Itemize
inotify 
\begin_inset CommandInset citation
LatexCommand cite
key "inotify"

\end_inset

 (through the Python pyinotify 
\begin_inset CommandInset citation
LatexCommand cite
key "pyinotify"

\end_inset

 module)
\end_layout

\begin_layout Itemize
SQLite 
\begin_inset CommandInset citation
LatexCommand cite
key "SQLite"

\end_inset

 (through the Python sqlite3 
\begin_inset CommandInset citation
LatexCommand cite
key "pysqlite"

\end_inset

 module and the PHP PDO 
\begin_inset CommandInset citation
LatexCommand cite
key "PDO"

\end_inset

 database abstraction layer)
\end_layout

\begin_layout Itemize
django-storages 
\begin_inset CommandInset citation
LatexCommand cite
key "django-storages"

\end_inset


\end_layout

\begin_layout Itemize
cssutils 
\begin_inset CommandInset citation
LatexCommand cite
key "cssutils"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Uses the following third party applications
\end_layout

\begin_deeper
\begin_layout Itemize
ImageMagick 
\begin_inset CommandInset citation
LatexCommand cite
key "ImageMagick"

\end_inset


\end_layout

\begin_layout Itemize
pngcrush 
\begin_inset CommandInset citation
LatexCommand cite
key "pngcrush"

\end_inset


\end_layout

\begin_layout Itemize
jpegtran 
\begin_inset CommandInset citation
LatexCommand cite
key "jpegtran"

\end_inset


\end_layout

\begin_layout Itemize
gifsicle 
\begin_inset CommandInset citation
LatexCommand cite
key "gifsicle"

\end_inset


\end_layout

\begin_layout Itemize
YUI Compressor 
\begin_inset CommandInset citation
LatexCommand cite
key "YUI Compressor"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Supports the following storage systems
\end_layout

\begin_deeper
\begin_layout Itemize
FTP (via django-storages, through the Python ftplib 
\begin_inset CommandInset citation
LatexCommand cite
key "ftplib"

\end_inset

 module)
\end_layout

\begin_layout Itemize
Amazon S3 
\begin_inset CommandInset citation
LatexCommand cite
key "Amazon S3"

\end_inset

 (via django-storages, through the Python boto 
\begin_inset CommandInset citation
LatexCommand cite
key "boto"

\end_inset

 module)
\end_layout

\begin_layout Itemize
Amazon CloudFront 
\begin_inset CommandInset citation
LatexCommand cite
key "Amazon CloudFront"

\end_inset

 (via django-storages, through the Python boto 
\begin_inset CommandInset citation
LatexCommand cite
key "boto"

\end_inset

 module)
\end_layout

\end_deeper
\begin_layout Itemize
Integrates with the following applications
\end_layout

\begin_deeper
\begin_layout Itemize
Apache HTTP Server
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Feedback from businesses
\end_layout

\begin_layout Standard
I had a nice list of seven companies who wanted to test my bachelor thesis,
 either the CDN integration for Drupal using the CDN or just the daemon
 (for either syncing files to a static file server or to back up servers).
\end_layout

\begin_layout Standard
I gave them more than three weeks time to test this, which is a fairly large
 amount of time, considering that the whole timespan of the thesis was about
 4 months.
 Unfortunately, these are actual companies, each with their own schedules
 and clients to keep satisfied.
 So, as was to be expected, the feedback I 
\emph on
actually
\emph default
 got was far more sparse than I hoped for.
 However unfortunate, this is of course understandable.
\end_layout

\begin_layout Standard
Three CDNs promised me to provide me (and the businesses that were going
 to test my work) free CDN accounts for testing purposes.
 Two of them immediately gave me accounts: SimpleCDN 
\begin_inset CommandInset citation
LatexCommand cite
key "SimpleCDN"

\end_inset

 and Rambla 
\begin_inset CommandInset citation
LatexCommand cite
key "Rambla"

\end_inset

.
 Thanks!
\begin_inset Newline newline
\end_inset

I ensured the daemon's FTP support was compatible with their FTP servers.
\end_layout

\begin_layout Standard
There is 
\emph on
one
\emph default
 company that did give feedback though.
 Which is of course still much better than none at all.
\end_layout

\begin_layout Standard
The company SlideME 
\begin_inset CommandInset citation
LatexCommand cite
key "SlideME"

\end_inset

 evaluated the daemon I wrote, which is by far the most important part of
 this thesis.
 They will be using it on a Drupal web site though, but have to adapt the
 daemon first to match their infrastructure (see later).
 My sincere thanks go to SlideME! What's interesting is that their company
 is all about Android 
\begin_inset CommandInset citation
LatexCommand cite
key "Android"

\end_inset

, another open source project.
\end_layout

\begin_layout Quotation
SlideME is an industry pioneer in Android content delivery, creating the
 first application manager for discovering, downloading and purchasing of
 Android applications directly to the device.
 
\end_layout

\begin_layout Standard
They are planning on using it with the following infrastructure:
\end_layout

\begin_layout Enumerate
MySQL database instance (with few slaves)
\end_layout

\begin_layout Enumerate
Dedicated 
\begin_inset Quotes eld
\end_inset

editor instance
\begin_inset Quotes erd
\end_inset

 (i.e.
 a single web server for the users that are allowed to add content) with
 Amazon S3 to keep Drupal files and upload new ones.
\end_layout

\begin_layout Enumerate
Multiple "viewer instances
\begin_inset Quotes erd
\end_inset

 for regular users on Amazon Elastic Compute Cloud (EC2, these are virtual
 server instances in the cloud) behind Elastic Load Balancing (which distributes
 incoming traffic across mutliple Amazon EC2 instances).
\end_layout

\begin_layout Standard
Kay Webber, whom works for SlideME and is responsible for integrating my
 daemon with the infrastructure, made four suggestions:
\end_layout

\begin_layout Enumerate
On his servers with the CentOS operating system , only Python 2.4 was available,
 whereas, my daemon requires Python 2.5.
 He made the changes necessary to get it to work in Python 2.4.
 He did not manage to find a pyinotify package for his Linux distribution
 however, making 
\family typewriter
fsmonitor.py
\family default
 fall back to the polling mechanism.
 However, not all of the Python packages I use are guaranteed to work with
 Python 2.4 (because Python 2.4 is quite old already, it was released in November
 2004).
 On most servers, it is possible to install Python 2.5 with a single command.
\end_layout

\begin_layout Enumerate
The daemon is run on the editor instance, but the database of synced files
 needs to be accessed from the viewer instances as well.
 Therefor, he is working on a patch to also support storing the synced files
 database in a MySQL database (which supports replication) instead of just
 SQLite.
\end_layout

\begin_layout Enumerate
He would like to be able to use environment variables in the configuration
 file.
 He's also working on a patch for this.
\end_layout

\begin_layout Enumerate
He needs the ability to upload 
\begin_inset Quotes eld
\end_inset

private
\begin_inset Quotes erd
\end_inset

 files to Amazon S3 (this works using query string authentication, i.e.
 placing a combination of a public key and a signature in the query string).
\end_layout

\begin_layout Standard
In response, I asked him a couple of questions:
\end_layout

\begin_layout Itemize
Was the documentation sufficient?
\end_layout

\begin_layout Quote
Thesis and readme are both very clear.
 Now I regret that I did not finished my own bachelor degree ;) So the answer
 to your question is yes.
\end_layout

\begin_layout Itemize
Did you find the setup easy? Do you think the configuration file is self-explana
tory?
\end_layout

\begin_layout Quote
The configuration file was mostly but not 
\emph on
always
\emph default
 self-explanatory.
 For example, I missed the connection between 
\family typewriter
<source name="drupal_files">
\family default
 and 
\family typewriter
<rule for="drupal_files">
\family default
 and named them differently at the beginning.
 But I have no suggestions for this case.
\begin_inset Newline newline
\end_inset

The documentation on setup is clear.
\end_layout

\begin_layout Itemize
Since you've already been writing patches: what did you think of the code
 structure?
\end_layout

\begin_layout Quote
Clear and self-explanatory.
\end_layout

\begin_layout Itemize
How would you rate the performance? (Keeping in mind that discovering files
 is orders of magnitude slower due to the fallback to polling for detecting
 changes.) How many files are you syncing and what is their combined size?
\end_layout

\begin_layout Quote
I have not started performance tests yet, so I cannot rate it.
\end_layout

\begin_layout Standard
So, overall, the impression seems to be very good.
 The documentation in general, setting it up and the configuration file
 were strongly approved by him.
 The code structure even more.
 He did not yet have the time to do real-world tests.
\begin_inset Newline newline
\end_inset

The trend in his answers suggests that the code structure is sufficiently
 solid and that it conceptually makes sense; that setup and configuration
 are sufficiently straightforward; all of which hopefully is enough for
 this application to become a healthy open source project.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Test case: DriverPacks.net
\end_layout

\begin_layout Standard
As a back-up plan in case there would not be much feedback from companies
 (as turned out to be the case), I wanted to have a web site under my own
 control to test on.
 That web site is DriverPacks.net 
\begin_inset CommandInset citation
LatexCommand cite
key "DriverPacks.net"

\end_inset

.
 It is the web site of an open source project, with more than 100,000 visits
 per month and more than 700,000 pageviews per month, with traffic coming
 from all around the world.
 These fairly large numbers and the geographical spread of its visitors
 makes it a good test case for measuring the overall effect.
 See figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Google-Analytics"

\end_inset

 for details.
\begin_inset Newline newline
\end_inset

Visitors come from 196 different countries, although the top three countries
 represent more than a quarter of the visitors and the top ten countries
 represent more than half of the visitors.
 Nevertheless, this is still a very geographically dispersed audience.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/testcase/google analytics.png
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Google Analytics' Map Overlay view for DriverPacks.net.
\begin_inset CommandInset label
LatexCommand label
name "fig:Google-Analytics"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Implementation
\end_layout

\begin_layout Standard
The web site was previously completely custom and written in PHP.
 On June 11, I launched the new web site, which is built upon Drupal.
 On June 21 around 2 AM GMT+1, I enabled CDN integration for all users.
 To show the possibilities of the daemon in combination with the CDN integration
 module however, I implemented the 
\family typewriter
cdn_advanced_pick_server()
\family default
 function that the Drupal CDN integration module calls when it is running
 in advanced mode and when that function exists.
 It really allows you to create any desired logic for routing users to CDNs
 or static file servers, as is demonstrated in listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:cdn_advanced_pick_server"

\end_inset

.
\end_layout

\begin_layout Standard
It was decided to use two servers because the latency to SimpleCDN's servers
 is higher than acceptable in Europe (around 100 milliseconds or more).
 They claim to have servers in Amsterdam, but for some reason all requests
 from my IP (in Belgium) was being routed to a datacenter in Phoenix, Arizona
 in the United States, which explains the high latency (this was discovered
 using the 
\family typewriter
traceroute
\family default
 command).
 This was worse than 
\emph on
not
\emph default
 using a CDN for countries with low-latency connections to Belgium.
 Since latency is the major problem in the loading of CSS, JavaScript and
 other files referenced by the HTML (because of the multitude of round trips
 of HTTP requests), I measured this using the 
\family typewriter
ping
\family default
 command.
 I mostly relied on the 
\begin_inset Quotes eld
\end_inset

just ping
\begin_inset Quotes erd
\end_inset

 web service 
\begin_inset CommandInset citation
LatexCommand cite
key "Just Ping"

\end_inset

 to get ping times from all around the world, to get a good global view.
\end_layout

\begin_layout Standard
The 'warp' server uses the 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

static.driverpacks.net
\end_layout

\end_inset

 domain name and is an Apache instance (with far future Expires headers,
 gzip enabled and Last-Modified headers disabled) optimized for static file
 serving and the 'simplecdn' server uses the 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout
cdn.driverpacks.net
\end_layout

\end_inset

 domain name.
 This is a DNS CNAME record pointing to 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout
e1h21.simplecdn.net
\end_layout

\end_inset

.
 Files served from this domain have gzip Enabled, far future Expire Headers
 and no Last-Modified headers.
\end_layout

\begin_layout Standard
The Drupal 
\family typewriter
ip2country
\family default
 module 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal ip2country"

\end_inset

 is used to map an IP to a country code.
 This module uses the database maintained by ARIN, the American Registry
 for Internet Numbers.
 ARIN is one of the five official Regional Internet Registries (RIR) responsible
 for assigning IP addresses.
 It is claimed to be 98% accurate.
 Via the 
\family typewriter
continents_api
\family default
 module 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal continents_api"

\end_inset

 (which I wrote as an addition to the 
\family typewriter
countries_api
\family default
 module 
\begin_inset CommandInset citation
LatexCommand cite
key "Drupal countries_api"

\end_inset

), all country codes for Europe are collected.
 Russia's country code is appended to this array.
 This way, all European countries plus Russia are assigned to the 'warp'
 server.
 Visitors from all other countries are assigned to the 'simplecdn' server,
 which is the SimpleCDN account.
 This implies that files are being synced through the daemon to both the
 'warp' server (using the symlink or copy transporter, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:daemon:modules:transporter_symlink_or_copy.py"

\end_inset

) and to the 'simplecdn' server (using the FTP transporter, again see section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:daemon:modules:transporter_ftp.py"

\end_inset

).
\end_layout

\begin_layout Standard
Visitors are informed on the homepage from which server they are getting
 their static files, as can be seen in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Visitor-location-block."

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/testcase/visitor location block.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Visitor location block.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:Visitor-location-block."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},float,language=PHP,tabsize=4"
inline false
status open

\begin_layout Plain Layout

function driverpacksnet_map_country_to_server($country_code) {
\end_layout

\begin_layout Plain Layout

  $countries_for_warp_server = continents_api_get_countries('EU') + array('RU');
\end_layout

\begin_layout Plain Layout

  if (in_array($country_code, $countries_for_warp_server)) {
\end_layout

\begin_layout Plain Layout

    return 'warp';
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else {
\end_layout

\begin_layout Plain Layout

    return 'simplecdn';
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * Implementation of cdn_advanced_pick_server().
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

function cdn_advanced_pick_server($servers_for_file) {
\end_layout

\begin_layout Plain Layout

  static $server_name;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  if (!isset($server_name)) {
\end_layout

\begin_layout Plain Layout

    // Determine which server to use for the current visitor.
\end_layout

\begin_layout Plain Layout

    $ip = $_SERVER['REMOTE_ADDR'];
\end_layout

\begin_layout Plain Layout

    $country_code = ip2country_get_country($ip);
\end_layout

\begin_layout Plain Layout

    $server_name = driverpacksnet_map_country_to_server($country_code);
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  // Try to pick the desired server - if the file being served is available
 on
\end_layout

\begin_layout Plain Layout

  // our the desired server.
\end_layout

\begin_layout Plain Layout

  foreach ($servers_for_file as $server_for_file) {
\end_layout

\begin_layout Plain Layout

    if ($server_for_file['server'] == $server_name) {
\end_layout

\begin_layout Plain Layout

      return $server_for_file;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  // In case our desired server does not have the file, pick the first server
\end_layout

\begin_layout Plain Layout

  // that does have it.
\end_layout

\begin_layout Plain Layout

  return $servers_for_file[0];
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout

\family typewriter
cdn_advanced_pick_server()
\family default
 function and helper function.
\begin_inset CommandInset label
LatexCommand label
name "lst:cdn_advanced_pick_server"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
One day later, again around 2 AM GMT+1, I added some optimizations: the
 CSS and JavaScript of the delicious.com bookmarking widget on the homepage
 was altered to be served from DriverPacks.net's web server (and after syncing,
 these files will be served from either the static file server or the CDN).
 The AJAX request to delicious.com's servers was being delayed until after
 the 
\family typewriter
window.onload
\family default
 event, i.e.
 when the page was fully rendered.
 This is not annoying because the information in this widget is not critical.
\begin_inset Newline newline
\end_inset

I also modified the loading of the image necessary for the statistics service.
 Normally, this image is simply referenced from within the HTML.
 However, now it is being detected on the server side if the visitor has
 JavaScript enabled (Drupal then sets a 
\family typewriter
has_js
\family default
 cookie, which can be detected on the server side) and in that case, a piece
 of JavaScript is inserted instead that is executed after the 
\family typewriter
window.onload
\family default
 event, which inserts the HTML that loads the image.
 CSS is used to consume the whitespace until the image is loaded (where
 otherwise the image would have been), to prevent relayouting.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
TODO
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "High Performance Web Sites Book"

\end_inset


\emph on
High Performance Web Sites
\emph default
, Steve Souders, 2007, O'Reilly, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://stevesouders.com/hpws/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal"

\end_inset


\emph on
Drupal
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://drupal.org/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal history"

\end_inset


\emph on
History
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://drupal.org/node/769
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal principles"

\end_inset


\emph on
Principles
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://drupal.org/principles
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal.org growth"

\end_inset


\emph on
Drupal.org Explosion and Trends
\emph default
, Steven Wittens, March 2007, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://acko.net/blog/drupal-org-explosion-and-trends
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal growth"

\end_inset


\emph on
Drupal 6 growth
\emph default
, Dries Buytaert, April 2009, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://buytaert.net/drupal-6-growth
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal sites"

\end_inset


\emph on
Drupal sites
\emph default
, Dries Buytaert, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://buytaert.net/tag/drupal-sites
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal drop is always moving"

\end_inset


\emph on
On backward compatibility: the drop is always moving
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://drupal.org/node/65922
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal coding standards"

\end_inset


\emph on
Coding standards
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://drupal.org/coding-standards
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal security team"

\end_inset


\emph on
Security Team
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://drupal.org/security-team
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal modules"

\end_inset


\emph on
Modules
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://drupal.org/project/modules
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal themes"

\end_inset


\emph on
Themes
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://drupal.org/project/themes
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "presentation Design Fast Websites"

\end_inset


\emph on
Design Fast Websites
\emph default
, Nicole Sullivan, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.slideshare.net/stubbornella/designing-fast-websites-presentation
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Google maps load time impact"

\end_inset


\emph on
We're all guinea pigs in Google's search experiment,
\emph default
 Stephen Shankland, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://news.cnet.com/8301-10784_3-9954972-7.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal usage statistics"

\end_inset


\emph on
Usage statistics for Drupal,
\emph default
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://drupal.org/project/usage/drupal
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "drupal-performance-article"

\end_inset


\emph on
Improving Drupal's page loading performance
\emph default
, Wim Leers, January 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://wimleers.com/article/improving-drupals-page-loading-performance
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "cdn-comparing-1"

\end_inset


\emph on
Content Owners Struggling To Compare One CDN To Another
\emph default
, March 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://blog.streamingmedia.com/the_business_of_online_vi/2008/03/content-owners.htm
l
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "cdn-comparing-2"

\end_inset


\emph on
How Is CDNs Network Performance For Streaming Measured?
\emph default
, August 2007, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://blog.streamingmedia.com/the_business_of_online_vi/2007/08/cdns-network-pe.ht
ml
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "profiling"

\end_inset


\emph on
Performance Analysis
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/Performance_analysis
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "UA Profiler"

\end_inset


\emph on
UA Profiler
\emph default
, Steve Souders, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://stevesouders.com/ua/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Cuzillion"

\end_inset


\emph on
Cuzillion
\emph default
, Steve Souders, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://stevesouders.com/cuzillion/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Cuzillion announcement"

\end_inset


\emph on
Cuzillion
\emph default
, Steve Souders, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.stevesouders.com/blog/2008/04/25/cuzillion/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Hammerhead"

\end_inset


\emph on
Hammerhead
\emph default
, Steve Souders, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://stevesouders.com/hammerhead/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Hammerhead announcement"

\end_inset


\emph on
Hammerhead:
\begin_inset space ~
\end_inset

moving performance testing upstream
\emph default
, Steve Souders, September 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.stevesouders.com/blog/2008/09/30/hammerhead-moving-performance-testing-
upstream/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Firebug"

\end_inset


\emph on
Firebug
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://getfirebug.com/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Fasterfox"

\end_inset


\emph on
Fasterfox
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://fasterfox.mozdev.org/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "YSlow"

\end_inset


\emph on
YSlow
\emph default
, Steve Souders, 2007, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://developer.yahoo.com/yslow/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Exceptional Performance"

\end_inset


\emph on
Exceptional Performance
\emph default
, 2007, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://developer.yahoo.com/performance/index.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "YSlow Rules"

\end_inset


\emph on
Best Practices for Speeding Up Your Web Site
\emph default
, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://developer.yahoo.com/performance/rules.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "YSlow Jeff Atwood"

\end_inset


\emph on
YSlow: Yahoo's Problems Are Not Your Problems
\emph default
, Jeff Atwood, 2007, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.codinghorror.com/blog/archives/000932.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "YSlow 2.0 early preview"

\end_inset


\emph on
YSlow 2.0 early preview in China
\emph default
, Yahoo! Developer Network, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://developer.yahoo.net/blog/archives/2008/12/yslow_20.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Souders State of Performance 2008"

\end_inset


\emph on
State of Performance 2008
\emph default
, Steve Souders, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.stevesouders.com/blog/2008/12/17/state-of-performance-2008/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Apache JMeter"

\end_inset


\emph on
Apache JMeter
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://jakarta.apache.org/jmeter/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "JMeter Drupal article 1"

\end_inset


\emph on
Load test your Drupal application scalability with Apache JMeter
\emph default
, John Quinn, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.johnandcailin.com/blog/john/load-test-your-drupal-application-scalabili
ty-apache-jmeter
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "JMeter Drupal article 2"

\end_inset


\emph on
Load test your Drupal application scalability with Apache JMeter: part two
\emph default
, John Quinn, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.johnandcailin.com/blog/john/load-test-your-drupal-application-scalabili
ty-apache-jmeter:-part-two
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Gomez web site"

\end_inset


\emph on
Gomez
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.gomez.com/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Keynote web site"

\end_inset


\emph on
Keynote
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.keynote.com/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "WebMetrics web site"

\end_inset


\emph on
WebMetrics
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.webmetrics.com/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Pingdom web site"

\end_inset


\emph on
Pingdom
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://pingdom.com/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AJAX wikipedia"

\end_inset


\emph on
AJAX
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/AJAX
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "web site Selenium"

\end_inset


\emph on
Selenium
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://seleniumhq.org/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Keynote KITE"

\end_inset


\emph on
Keynote KITE
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://kite.keynote.com/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Gomez Script Recorder"

\end_inset


\emph on
Gomez Script Recorder
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.gomeznetworks.com/help/Gomezu/main/Gomez_university/3_Gomez_Script_Reco
rder/toc.htm
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "web site WhitePages"

\end_inset


\emph on
WhitePages,
\emph default
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://whitepages.com/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Velocity 2008 Jiffy presentation"

\end_inset

Velocity 2008, 
\emph on
Jiffy: Open Source Performance Measurement and Instrumentation
\emph default
, Scott Ruthfield, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://en.oreilly.com/velocity2008/public/schedule/detail/4404
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "video of Velocity 2008 Jiffy presentation"

\end_inset

Velocity 2008, 
\emph on
video of the Jiffy presentation
\emph default
, Scott Ruthfield, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://blip.tv/file/1018527
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Jiffy project"

\end_inset


\emph on
Jiffy
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://code.google.com/p/jiffy-web/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Jiffy Firebug Extension"

\end_inset


\emph on
Jiffy Firebug Extension
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://billwscott.com/jiffyext/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "white paper Episodes"

\end_inset


\emph on
Episodes: a Framework for Measuring Web Page Load Times
\emph default
, Steve Souders, July 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://stevesouders.com/episodes/paper.php
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "presentation Episodes"

\end_inset


\emph on
Episodes: a shared approach for timing web pages
\emph default
, Steve Souders, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://stevesouders.com/docs/episodes-tae-20080930.ppt
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Google Analytics"

\end_inset


\emph on
Google Analytics
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://google.com/analytics
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Episodes home page"

\end_inset


\emph on
Episodes
\emph default
, Steve Souders, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://stevesouders.com/episodes/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Episodes white paper"

\end_inset


\emph on
Episodes: a Framework for Measuring Web Page Load Times,
\emph default
 Steve Souders, July 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://stevesouders.com/episodes/paper.php
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Episodes Drupal module project page"

\end_inset


\emph on
Episodes Drupal module
\emph default
, Wim Leers, 2009, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://drupal.org/project/episodes
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Episodes Example"

\end_inset


\emph on
Episodes Example
\emph default
, Steve Souders, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://stevesouders.com/episodes/example.php
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal Batch API"

\end_inset


\emph on
Batch API
\emph default
, Drupal 6, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://api.drupal.org/api/group/batch/6
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal Forms API"

\end_inset


\emph on
Forms API
\emph default
, Drupal 6, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://api.drupal.org/api/group/form_api/6
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal Hierarchial Select"

\end_inset


\emph on
Hierarchical Select module
\emph default
, Wim Leers, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://drupal.org/project/hierarchical_select
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Google Chart API"

\end_inset


\emph on
Google Chart API
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://code.google.com/apis/chart/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Browser.php"

\end_inset


\emph on
Browser.php
\emph default
, Chris Schuld, 2009, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://chrisschuld.com/projects/browser-php-detecting-a-users-browser-from-php/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "inotify"

\end_inset


\emph on
inotify
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/Inotify
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "pyinotify"

\end_inset


\emph on
pyinotify
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://pyinotify.sourceforge.net/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "FSEvents"

\end_inset


\emph on
FSEvents Programming Guide
\emph default
, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://developer.apple.com/documentation/Darwin/Conceptual/FSEvents_ProgGuide/Intr
oduction/Introduction.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "FSEvents review"

\end_inset


\emph on
FSEvents review
\emph default
, John Siracusa, 2007, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://arstechnica.com/apple/reviews/2007/10/mac-os-x-10-5.ars/7
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "MS fsmonitor APIs"

\end_inset


\emph on
Watch a Directory for Changes
\emph default
, Tim Golden, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "PyObjC"

\end_inset


\emph on
PyObj
\emph default
C, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://pyobjc.sourceforge.net/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "SQLite"

\end_inset


\emph on
SQLite
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.sqlite.org/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "SQLite testing"

\end_inset


\emph on
How SQLite is Tested,
\emph default
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.sqlite.org/testing.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "SQLite when to use"

\end_inset


\emph on
Appropriate Uses For SQLite
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.sqlite.org/whentouse.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "SQLite well-known users"

\end_inset


\emph on
Well-Known Users of SQLite
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.sqlite.org/famous.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Python shelve"

\end_inset


\emph on
shelve - Python object persistence
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://docs.python.org/library/shelve.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "pysqlite"

\end_inset


\emph on
pysqlite
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://docs.python.org/library/sqlite3.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "smush.it"

\end_inset


\emph on
smush.it
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://smush.it/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "imageopt-1"

\end_inset


\emph on
Image Optimization Part 1: The Importance of Images
\emph default
, Stoyan Stefanov, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://yuiblog.com/blog/2008/10/29/imageopt-1/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "imageopt-2"

\end_inset


\emph on
Image Optimization Part 2: Selecting the Right File Format
\emph default
, Stoyan Stefanov, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://yuiblog.com/blog/2008/11/04/imageopt-2/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "imageopt-3"

\end_inset


\emph on
Image Optimization, Part 3: Four Steps to File Size Reduction
\emph default
, Stoyan Stefanov, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://yuiblog.com/blog/2008/11/14/imageopt-3/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "imageopt-4"

\end_inset


\emph on
Image Optimization, Part 4: Progressive JPEG … Hot or Not?
\emph default
, Stoyan Stefanov, 2008, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://yuiblog.com/blog/2008/12/05/imageopt-4/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ImageMagick"

\end_inset


\emph on
ImageMagick
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://imagemagick.org/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "pngcrush"

\end_inset


\emph on
pngcrush
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://pmt.sourceforge.net/pngcrush/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "jpegtran"

\end_inset


\emph on
jpegtran
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://jpegclub.org/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "gifsicle"

\end_inset


\emph on
gifsicle
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.lcdf.org/gifsicle/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "cssutils"

\end_inset


\emph on
cssutils
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://cthedot.de/cssutils/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "YUI Compressor"

\end_inset


\emph on
YUI Compressor
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.julienlecomte.net/blog/2007/08/11/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Rhino"

\end_inset


\emph on
Rhino
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.mozilla.org/rhino/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "JSMIN"

\end_inset


\emph on
JSMin, The JavaScript Minifier
\emph default
, Douglas Crockford, 2003, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://javascript.crockford.com/jsmin.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Django"

\end_inset


\emph on
Django
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.djangoproject.com/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Django custom storage system"

\end_inset


\emph on
Writing a custom storage system
\emph default
, Django 1.0 documentation, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://docs.djangoproject.com/en/1.0/howto/custom-file-storage/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "django-storages"

\end_inset


\emph on
django-storages
\emph default
, David Larlet et al., 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://code.welldev.org/django-storages/wiki/Home
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "django-storages FTPStorage patch"

\end_inset


\emph on
FTPStorage: saving large files + more robust exists()
\emph default
, Wim Leers, 2009, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://code.welldev.org/django-storages/issue/4/ftpstorage-saving-large-files-+-mo
re-robust
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "django-storages S3BotoStorage patch"

\end_inset


\emph on
S3BotoStorage: set Content-Type header, ACL fixed, use HTTP and disable
 query auth by default
\emph default
, Wim Leers, 2009, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://code.welldev.org/django-storages/issue/5/s3botostorage-set-content-type-hea
der-acl-fixed-use-http-and-disable-query-auth-by
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "django-storages SymlinkOrCopyStorage patch"

\end_inset


\emph on
SymlinkOrCopyStorage: new custom storage system
\emph default
, Wim Leers, 2009, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://code.welldev.org/django-storages/issue/6/symlinkorcopystorage-new-custom-st
orage
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ftplib"

\end_inset


\emph on
ftplib — FTP protocol client
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://docs.python.org/library/ftplib.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Amazon S3"

\end_inset


\emph on
Amazon S3
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://aws.amazon.com/s3/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Amazon CloudFront"

\end_inset


\emph on
Amazon CloudFront
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://aws.amazon.com/cloudfront/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "boto"

\end_inset


\emph on
boto
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://code.google.com/p/boto/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "MogileFS"

\end_inset


\emph on
MogileFS
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.danga.com/mogilefs/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "CouchDB"

\end_inset


\emph on
Apache CouchDB
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://couchdb.apache.org/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Apache signals"

\end_inset


\emph on
Stopping and Restarting - Apache HTTP Server,
\emph default
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://httpd.apache.org/docs/2.2/stopping.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "pipes-and-filters-1"

\end_inset


\emph on
Pipes and Filters
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/Pipes_and_filters
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "pipes-and-filters-2"

\end_inset


\emph on
Pipes and Filters
\emph default
, Jorge Luis Ortega Arjona, Department of Computer Science of the University
 College London, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.cs.ucl.ac.uk/staff/J.Ortega-Arjona/patterns/PF.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "pipes-and-filters-3"

\end_inset


\emph on
Pipe-and-filter
\emph default
, Jike Chong; Arlo Faria; Satish Nadathur; Youngmin Yi, Electrical Engineering
 and Computer Sciences department of UC Berkely, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://parlab.eecs.berkeley.edu/wiki/patterns/pipe-and-filter
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "pipes-and-filters-4"

\end_inset


\emph on
Pipes and Filters
\emph default
, Enterprise Integration Patterns, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.eaipatterns.com/PipesAndFilters.html
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "currying"

\end_inset


\emph on
Currying
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/Currying
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "PDO"

\end_inset


\emph on
PDO
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://php.net/pdo
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "SimpleCDN"

\end_inset


\emph on
SimpleCDN
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.simplecdn.com/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Rambla"

\end_inset


\emph on
Rambla
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://rambla.be/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "SlideME"

\end_inset


\emph on
SlideME LLC
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://slideme.org/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Android"

\end_inset


\emph on
Android
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.android.com/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "DriverPacks.net"

\end_inset


\emph on
DriverPacks.net
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://driverpacks.net/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Just Ping"

\end_inset


\emph on
Just Ping
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://just-ping.com/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal ip2country"

\end_inset


\emph on
IP-based Determination of a Visitor's Country
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://drupal.org/project/ip2country
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal countries_api"

\end_inset


\emph on
Country codes API
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://drupal.org/project/countries_api
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Drupal continents_api"

\end_inset


\emph on
Continents API
\emph default
, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://drupal.org/node/255215#comment-1722758
\end_layout

\end_inset


\end_layout

\end_body
\end_document
