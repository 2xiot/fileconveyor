<?php
// $Id$

/**
 * @file
 * Implementation of the core hooks, defines and public functions.
 */


define('EPISODES_STATUS_VARIABLE', 'episodes_status');
define('EPISODES_DISABLED', 0);
define('EPISODES_DEBUG', 1);
define('EPISODES_ENABLED', 2);

// Advanced settings.
define('EPISODES_BEACON_URL_VARIABLE', 'episodes_beacon_url');
define('EPISODES_LOGGING_VARIABLE', 'episodes_logging');
define('EPISODES_EXCLUDED_PATHS_VARIABLE', 'episodes_excluded_paths');
define('EPISODES_EXCLUDED_PATHS_DEFAULT', 'admin/*');

// Behavior settings.
define('EPISODES_BEHAVIOR_LAST_SCAN_VARIABLE', 'episodes_behavior_last_scan');
define('EPISODES_BEHAVIOR_LAST_SCAN_NEVER', -1);
define('EPISODES_BEHAVIOR_NOT_IGNORED', 0);
define('EPISODES_BEHAVIOR_IGNORED', 1);


//----------------------------------------------------------------------------
// Drupal core hooks.

/**
 * Implementation of hook_menu().
 */
function episodes_menu() {
  $items['admin/settings/episodes'] = array(
    'title'            => 'Episodes',
    'description'      => 'Configure various settings for Episodes.',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('episodes_admin_settings'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'episodes.admin.inc',
  );
  $items['admin/settings/episodes/settings'] = array(
    'title'            => 'Settings',
    'access arguments' => array('administer site configuration'),
    'weight'           => -10,
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'file'             => 'episodes.admin.inc',
  );
  $items['admin/settings/episodes/behaviors'] = array(
    'title'            => 'Behaviors',
    'description'      => 'Drupal behaviors settings.',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('episodes_admin_settings_behaviors'),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'episodes.admin.inc',
  );
  $items['admin/settings/episodes/behaviors/scan'] = array(
    'title'            => 'Scan for behaviors',
    'description'      => 'Scan Drupal installation for Drupal.behaviors',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'episodes_scan_behaviors',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'episodes.admin.inc',
  );
  $items['admin/settings/episodes/behaviors/scan/results'] = array(
    'title'            => 'Scan results',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'episodes_scan_behaviors_results',
    'type'             => MENU_CALLBACK,
    'file'             => 'episodes.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function episodes_init() {
  if (episodes_is_enabled($path)) {  
    $path = drupal_get_path('module', 'episodes');

    // Cheat a little bit: use drupal_set_html_head() to add the episodes.js
    // file as early as possible in the <HEAD> tag. And before that, add some
    // settings. We can't use Drupal.settings for this, because Drupal.js will
    // not yet be loaded.
    $cache_mode = variable_get('cache', CACHE_DISABLED);
    $logging    = variable_get(EPISODES_LOGGING_VARIABLE, EPISODES_DISABLED);
    $js_code = array(
      'var EPISODES = EPISODES || {};',
      'EPISODES.frontendStartTime=Number(new Date());',
      'EPISODES.compatScriptUrl="' . url("$path/lib/episodes-compat.js") . '";',
      'EPISODES.logging="' . $logging .'";',
      'EPISODES.beaconUrl="' . variable_get(EPISODES_BEACON_URL_VARIABLE, url('episodes/beacon'))  . '";',
    );
    drupal_set_html_head('<script type="text/javascript">' . implode('', $js_code) . '</script>');
    drupal_set_html_head('<script type="text/javascript" src="' . url("$path/lib/episodes.js") . '"></script>');

    // Add the drupal.episodes.js file, which provides automagic integration
    // for Drupal behaviors with Episodes.
    drupal_add_js("$path/drupal.episodes.js", 'module', 'header');

    // Let Drupal.Episodes (JS) know which Drupal.behaviors it should ignore.
    $ignored_behaviors = array();
    $behaviors = episodes_behavior_load(NULL, EPISODES_BEHAVIOR_IGNORED);
    foreach ($behaviors as $behavior) {
      $ignored_behaviors[$behavior->name] = TRUE;
    }
    drupal_add_js(array('Episodes' => array('ignoredBehaviors' => $ignored_behaviors)), 'setting');
  }
}


//----------------------------------------------------------------------------
// Public functions.

/**
 * Check if the Episodes module should add episodes.js and additional mark &
 * measure calls to the currently displayed web page or not.
 *
 * @return
 *   TRUE if it's enabled for the current web page, otherwise FALSE.
 */
function episodes_is_enabled() {
  // Get all related settings.
  $status        = variable_get(EPISODES_STATUS_VARIABLE, EPISODES_DEBUG);
  $path_patterns = variable_get(EPISODES_EXCLUDED_PATHS_VARIABLE, EPISODES_EXCLUDED_PATHS_DEFAULT);
  $path = drupal_get_path_alias($_GET['q']);

  // Determine whether episodes is enabled at the current path.
  $enabled = TRUE;
  $enabled = $enabled && !drupal_match_path($path, $path_patterns);
  $enabled = $enabled && ($status == EPISODES_ENABLED
                          ||
                         ($status == EPISODES_DEBUG && user_access('administer site configuration')));

  return $enabled;
}

/**
 * Load all behaviors that were detected during the last scan. Optionally
 * other conditions must be fulfilled.
 *
 * @param $name
 *   Optional. Filter by behavior name.
 * @param $ignored
 *   Optional. Filter by ignored field (either EPISODES_BEHAVIOR_NOT_IGNORED
 *   or EPISODES_BEHAVIOR_IGNORED).
 * @return
 *   An array of behavior objects that match the set conditions.
 */
function episodes_behavior_load($name = NULL, $ignored = NULL) {
  $last_scan = variable_get(EPISODES_BEHAVIOR_LAST_SCAN_VARIABLE, EPISODES_BEHAVIOR_LAST_SCAN_NEVER);
  $behaviors = array();

  // Build the SQL.
  $sql = "SELECT name, module, filename, ignored
          FROM {episodes_behavior}
          WHERE detected = %d";
  if (isset($name)) {
    $sql .= " AND name = '$name'";
  }
  if (isset($ignored)) {
    $sql .= " AND ignored = $ignored";
  }
  $sql .= " ORDER BY name";

  // Query the database.
  $result = db_query($sql, $last_scan);
  while ($behavior = db_fetch_object($result)) {
    $behaviors[] = $behavior;
  }

  return $behaviors;
}
