<?php
// $Id$

/**
 * @file
 * This is the file description for Untitled module.
 *
 * In this more verbose, multi-line description, you can specify what this
 * file does exactly. Make sure to wrap your documentation in column 78 so
 * that the file can be displayed nicely in default-sized consoles.
 */


define('EPISODES_STATUS_VARIABLE', 'episodes_status');
define('EPISODES_DISABLED', 0);
define('EPISODES_DEBUG', 1);
define('EPISODES_ENABLED', 2);


// Advanced settings.
define('EPISODES_BEACON_URL_VARIABLE', 'episodes_beacon_url');
define('EPISODES_LOGGING_VARIABLE', 'episodes_logging');
define('EPISODES_EXCLUDED_PATHS_VARIABLE', 'episodes_excluded_paths');
define('EPISODES_EXCLUDED_PATHS_DEFAULT', 'admin/*');
define('EPISODES_LAST_SCAN_VARIABLE', 'episodes_last_scan');
define('EPISODES_LAST_SCAN_NEVER', -1);


// Ingestor settings.
define('EPISODES_INGESTOR_STATUS_VARIABLE', 'episodes_ingestor_status');
define('EPISODES_INGESTOR_STATUS_DEFAULT', EPISODES_DISABLED);
define('EPISODES_INGESTOR_LOG_FILE_VARIABLE', 'episodes_ingestor_log_file');
define('EPISODES_INGESTOR_LINES_PER_RUN_VARIABLE', 'episodes_num_lines_per_run');
define('EPISODES_INGESTOR_LINES_PER_RUN_DEFAULT', 10000);
define('EPISODES_INGESTOR_LAST_RUN_VARIABLE', 'episodes_ingestor_last_run');


// Behavior settings.
define('EPISODES_BEHAVIOR_NOT_IGNORED', 0);
define('EPISODES_BEHAVIOR_IGNORED', 1);




//----------------------------------------------------------------------------
// Drupal core hooks.

/**
 * Implementation of hook_menu().
 */
function episodes_menu() {
  $items['admin/settings/episodes'] = array(
    'title'            => 'Episodes',
    'description'      => 'Configure various settings for Episodes.',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('episodes_admin_settings'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'episodes.admin.inc',
  );
  $items['admin/settings/episodes/settings'] = array(
    'title'            => 'Settings',
    'access arguments' => array('administer site configuration'),
    'weight'           => -10,
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'file'             => 'episodes.admin.inc',
  );
  $items['admin/settings/episodes/behaviors'] = array(
    'title'            => 'Behaviors',
    'description'      => 'Drupal behaviors settings.',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('episodes_admin_settings_behaviors'),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'episodes.admin.inc',
  );
  $items['admin/settings/episodes/behaviors/scan'] = array(
    'title'            => 'Scan for behaviors',
    'description'      => 'Scan Drupal installation for Drupal.behaviors',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'episodes_scan_behaviors',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'episodes.admin.inc',
  );
  $items['admin/settings/episodes/behaviors/scan/results'] = array(
    'title'            => 'Scan results',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'episodes_scan_behaviors_results',
    'type'             => MENU_CALLBACK,
    'file'             => 'episodes.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function episodes_init() {
  // Get all related settings.
  $status        = variable_get(EPISODES_STATUS_VARIABLE, EPISODES_DEBUG);
  $logging       = variable_get(EPISODES_LOGGING_VARIABLE, EPISODES_DISABLED);
  $path_patterns = variable_get(EPISODES_EXCLUDED_PATHS_VARIABLE, EPISODES_EXCLUDED_PATHS_DEFAULT);
  $path = drupal_get_path_alias($_GET['q']);
  
  if (!drupal_match_path($path, $path_patterns)
      &&
        (
         $status == EPISODES_ENABLED
         ||
         ($status == EPISODES_DEBUG && user_access('administer site configuration'))
        )
      )
  {  
    $path = drupal_get_path('module', 'episodes');

    // Cheat a little bit: use drupal_set_html_head() to add the episodes.js
    // file as early as possible in the <HEAD> tag. And before that, add some
    // settings. We can't use Drupal.settings for this, because Drupal.js will
    // not yet be loaded.
    $cache_mode = variable_get('cache', CACHE_DISABLED);
    $js_code = array(
      'var EPISODES = EPISODES || {};',
      'EPISODES.frontendStartTime=Number(new Date());',
      'EPISODES.compatScriptUrl="' . url("$path/lib/episodes-compat.js") . '";',
      'EPISODES.logging="' . $logging .'";',
      'EPISODES.beaconUrl="' . variable_get(EPISODES_BEACON_URL_VARIABLE, url('episodes/beacon'))  . '";',
    );
    drupal_set_html_head('<script type="text/javascript">' . implode('', $js_code) . '</script>');
    drupal_set_html_head('<script type="text/javascript" src="' . url("$path/lib/episodes.js") . '"></script>');

    // Add the drupal.episodes.js file, which provides automagic integration
    // for Drupal behaviors with Episodes.
    drupal_add_js("$path/drupal.episodes.js", 'module', 'header');

    // Let Drupal.Episodes (JS) know which Drupal.behaviors it should ignore.
    $ignored_behaviors = array();
    $behaviors = episodes_behavior_load(NULL, EPISODES_BEHAVIOR_IGNORED);
    foreach ($behaviors as $behavior) {
      $ignored_behaviors[$behavior->name] = TRUE;
    }
    drupal_add_js(array('Episodes' => array('ignoredBehaviors' => $ignored_behaviors)), 'setting');
  }
}

/**
 * Implementation of hook_cron().
 */
function episodes_cron() {
  // Start the timer, include necessary files and retrieve the necessary
  // variables.
  timer_start('episodes_ingestor');
  require_once drupal_get_path('module', 'episodes') . '/episodes.ingestor.inc';
  require_once drupal_get_path('module', 'episodes') . '/lib/Browser.php';
  $log_file      = variable_get(EPISODES_INGESTOR_LOG_FILE_VARIABLE, NULL);
  $lines_per_run = variable_get(EPISODES_INGESTOR_LINES_PER_RUN_VARIABLE, EPISODES_INGESTOR_LINES_PER_RUN_DEFAULT);
  $last_run      = variable_get(EPISODES_INGESTOR_LAST_RUN_VARIABLE, NULL);

  // If the log file isn't configured, there's nothing we can do.
  if (!isset($log_file) || !file_exists($log_file)) {
    return FALSE;
  }

  // Open the log file and get the current inode and size.
  $file = fopen($log_file, 'r');
  $current_stat = fstat($file);
  $current_run['inode'] = $current_stat['ino'];
  $current_run['size']  = $current_stat['size'];

  // If the log file is new or has been truncated, we must reset the offset.
  $current_run['offset'] = (!isset($last_run)
                            || $last_run['inode'] != $current_run['inode']
                            || $last_run['size'] > $current_run['size'])
                         ? 0
                         : $last_run['offset'];

  // If the offset equals the size, there's nothing to process.
  if ($current_run['offset'] == $current_run['size']) {
    watchdog('episodes', 'Everything already processed.');
    return FALSE;
  }

  // Seek to the right offset.
  fseek($file, $current_run['offset'], SEEK_SET);

  // Parse the log file until we reach the maximum number of lines that should
  // be processed per run.
  $line_count = 0;
  while (!feof($file)) {
    $entry = fgets($file);
    if (empty($entry)) {
      continue;
    }
    episodes_ingestor_parse_entry($entry);

    // Stop in time.
    $line_count++;
    if ($line_count > $lines_per_run) {
      break;
    }
  }

  // Store the current offset.
  $current_run['offset'] = ftell($file);
  variable_set(EPISODES_INGESTOR_LAST_RUN_VARIABLE, $current_run);

  // Close the file, stop the timer and write to watchdog.
  fclose($file);
  $timer = timer_stop('cdn_sync');
  $duration = round($timer['time'] / 1000, 1);
  watchdog('episodes', 'Processed ' . $line_count . ' entries of the log file in ' . $duration . ' seconds.');
}


//----------------------------------------------------------------------------
// Public functions.

/**
 * Load all behaviors that were detected during the last scan. Optionally
 * other conditions must be fulfilled.
 *
 * @param $name
 *   Optional. Filter by behavior name.
 * @param $ignored
 *   Optional. Filter by ignored field (either EPISODES_BEHAVIOR_NOT_IGNORED
 *   or EPISODES_BEHAVIOR_IGNORED).
 * @return
 *   An array of behavior objects that match the set conditions.
 */
function episodes_behavior_load($name = NULL, $ignored = NULL) {
  $last_scan = variable_get(EPISODES_LAST_SCAN_VARIABLE, EPISODES_LAST_SCAN_NEVER);
  $behaviors = array();

  // Build the SQL.
  $sql = "SELECT name, module, filename, ignored
          FROM {episodes_behavior}
          WHERE detected = %d";
  if (isset($name)) {
    $sql .= " AND name = '$name'";
  }
  if (isset($ignored)) {
    $sql .= " AND ignored = $ignored";
  }
  $sql .= " ORDER BY name";

  // Query the database.
  $result = db_query($sql, $last_scan);
  while ($behavior = db_fetch_object($result)) {
    $behaviors[] = $behavior;
  }

  return $behaviors;
}
