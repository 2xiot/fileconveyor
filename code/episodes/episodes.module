<?php
// $Id$

/**
 * @file
 * This is the file description for Untitled module.
 *
 * In this more verbose, multi-line description, you can specify what this
 * file does exactly. Make sure to wrap your documentation in column 78 so
 * that the file can be displayed nicely in default-sized consoles.
 */


define('EPISODES_STATUS_VARIABLE', 'episodes_status');
define('EPISODES_STATUS_DISABLED', 0);
define('EPISODES_STATUS_DEBUG', 1);
define('EPISODES_STATUS_ENABLED', 2);

define('EPISODES_LOGGING_VARIABLE', 'episodes_logging');
define('EPISODES_LOGGING_DISABLED', 0);
define('EPISODES_LOGGING_ENABLED', 1);

define('EPISODES_BEACON_URL', 'episodes/beacon');


/**
 * Implementation of hook_menu().
 */
function episodes_menu() {
  $items['episodes/rtt-estimator'] = array(
    'title'            => 'RTT Estimator',
    'description'      => 'Page used to estimate the RTT.',
    'access callback'  => TRUE,
    'page callback'    => 'episodes_rtt_estimator',
    'type'             => MENU_CALLBACK,
  );


  $items['admin/settings/episodes'] = array(
    'title'            => 'Episodes',
    'description'      => 'Configure various settings for Episodes.',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('episodes_admin_settings'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'episodes.admin.inc',
  );
  $items['admin/settings/episodes/settings'] = array(
    'title'            => 'Settings',
    'access arguments' => array('administer site configuration'),
    'weight'           => -10,
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'file'             => 'episodes.admin.inc',
  );
  $items['admin/settings/episodes/behaviors'] = array(
    'title'            => 'Behaviors',
    'description'      => 'Drupal behaviors settings.',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('episodes_admin_settings_behaviors'),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'episodes.admin.inc',
  );
  $items['admin/settings/episodes/behaviors/scan'] = array(
    'title'            => 'Scan for behaviors',
    'description'      => 'Scan Drupal installation for Drupal.behaviors',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'episodes_scan_behaviors',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'episodes.admin.inc',
  );
  $items['admin/settings/episodes/behaviors/scan/results'] = array(
    'title'            => 'Scan results',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'episodes_scan_behaviors_results',
    'type'             => MENU_CALLBACK,
    'file'             => 'episodes.admin.inc',
  );

  return $items;
}


/**
 * Implementation of hook_boot().
 */
function episodes_boot() {
  static $time;

  if (!isset($time)) {
    list($usec, $sec) = explode(" ", microtime());
    $milliseconds = round(($sec + $usec) * 1000, 0);

    $time = $milliseconds;
  }
  else {
    return $time;
  }
}

/**
 * Implementation of hook_init().
 */
function episodes_init() {
  // Get all related settings.
  $status  = variable_get(EPISODES_STATUS_VARIABLE, EPISODES_STATUS_DEBUG);
  $logging = variable_get(EPISODES_LOGGING_VARIABLE, EPISODES_LOGGING_DISABLED);

  if ($status == EPISODES_STATUS_ENABLED || ($status == EPISODES_STATUS_DEBUG && user_access('administer site configuration'))) {  
    $path = drupal_get_path('module', 'episodes');

    // Cheat a little bit: use drupal_set_html_head() to add the episodes.js
    // file as early as possible in the <HEAD> tag. And before that, add some
    // settings. We can't use Drupal.settings for this, because Drupal.js will
    // not yet be loaded.
    $cache_mode = variable_get('cache', CACHE_DISABLED);
    $time = episodes_boot();
    $js_code = array(
      'var EPISODES = EPISODES || {};',
      'EPISODES.frontendStartTime=Number(new Date());',
      ($cache_mode == CACHE_AGGRESSIVE) ? '' : 'EPISODES.backendStartTime=Number(' . $time .');', //$_SERVER['REQUEST_TIME']
      'EPISODES.compatScriptUrl="' . url("$path/lib/episodes-compat.js") . '";',
      'EPISODES.logging="' . $logging .'";',
      'EPISODES.beaconUrl="' . url(EPISODES_BEACON_URL)  . '";',
    );
    drupal_set_html_head('<script type="text/javascript">' . implode('', $js_code) . '</script>');
    drupal_set_html_head('<script type="text/javascript" src="' . url("$path/lib/episodes.js") . '"></script>');

    // Add the drupal.episodes.js file, which provides automagic integration
    // for Drupal behaviors with Episodes.
    drupal_add_js("$path/drupal.episodes.js", 'module', 'header');
  }
}

function episodes_exit() {
  $duration = round(timer_read('page'));
  drupal_set_html_head('<script type="text/javascript">EPISODES.backendduration=' . $duration . ';</script>');
}


/**
 * for measuring CSS/JS files load times:
 * 
 * $measure_drupal_css_load_time = 'window.postMessage("EPISODES:measure:drupalcss:starttime", document.location); window.postMessage("EPISODES:mark:drupalcss", document.location);';
 * drupal_set_html_head('<script type="text/javascript">' . $measure_drupal_css_load_time . '</script>');
 *
 * Should end up in the theme layer. See TODO.txt
 */
 
 

function episodes_rtt_estimator() {
  // Disable devel module output.
  $GLOBALS['devel_shutdown'] = FALSE;

  // Print timestamp.
  list($usec, $sec) = explode(" ", microtime());
  $milliseconds = round(($sec + $usec) * 1000, 0);
  print $milliseconds;
  exit;
}
