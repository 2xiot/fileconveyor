<?php
// $Id$

/**
 * @file
 * Unit tests for the ingestor.
 */


class EpisodesServerIngestor extends DrupalWebTestCase {
  /**
   * Implementation of getInfo().
   */
  public function getInfo() {
    return array(
      'name'        => 'Ingestor',
      'description' => 'Verifies that the ingestor works properly.',
      'group'       => 'Episodes Server',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp('countries_api', 'ip2country', 'episodes_server');

    // Perform a basic fill of the ip2country table.
    $sql = "INSERT INTO {ip2country} (
              `ip_range_first`,
              `ip_range_last`,
              `ip_range_length`,
              `country`,
              `registry`,
              `ip_range_date`
            )
            VALUES ( %d, %d, %d, '%s', '%s', FROM_UNIXTIME(%d) )";
    db_query($sql,
             1421975859,
             1421975859,
             1,
             'BE',
             'ripencc',
             0
    );

    // Include ingestor .inc file.
    $path = drupal_get_path('module', 'episodes_server');
    require_once "$path/episodes_server.ingestor.inc";
  }

  public function testParseValidEntry() {
    $entry = '84.193.161.51 [Sunday, 15-Mar-2009 01:09:00 +0100] "?ets=css:72,headerjs:332,domready:800,filefieldValidateAutoAttach:0,HierarchicalSelect:2,collapse:3,teaser:54,textarea:0,DrupalBehaviors:67,frontend:893" 200 "http://dev/d6/node/add/page" "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.0.4) Gecko/2008102920 Firefox/3.0.4" "dev"';

    $reference                  = new stdClass();
    $reference->client_ip       = '84.193.161.51';
    $reference->server_time     = 1237075740;
    $reference->uri             = 'http://dev/d6/node/add/page';
    $reference->user_agent      = 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.0.4) Gecko/2008102920 Firefox/3.0.4';
    $reference->server_host     = 'dev';
    $reference->browser         = 'Firefox';
    $reference->browser_version = '3.0.4';
    $reference->os              = 'Apple';
    $reference->country         = 'BE';

    $measurements = episodes_server_ingestor_parse_entry($entry);

    // Entry is valid.
    $this->assertNotEqual($measurements, FALSE, 'The entry was marked as valid.');

    // Verify each generated measurement object.
    $this->assertIdentical(count($measurements), 10, 'The number of measurement objects is correct.');
    $reference->name = 'css';
    $reference->duration = 72;
    $this->assertMeasurement($measurements[0], $reference);
    $reference->name = 'headerjs';
    $reference->duration = 332;
    $this->assertMeasurement($measurements[1], $reference);
    $reference->name = 'domready';
    $reference->duration = 800;
    $this->assertMeasurement($measurements[2], $reference);
    $reference->name = 'filefieldValidateAutoAttach';
    $reference->duration = 0;
    $this->assertMeasurement($measurements[3], $reference);
    $reference->name = 'HierarchicalSelect';
    $reference->duration = 2;
    $this->assertMeasurement($measurements[4], $reference);
    $reference->name = 'collapse';
    $reference->duration = 3;
    $this->assertMeasurement($measurements[5], $reference);
    $reference->name = 'teaser';
    $reference->duration = 54;
    $this->assertMeasurement($measurements[6], $reference);
    $reference->name = 'textarea';
    $reference->duration = 0;
    $this->assertMeasurement($measurements[7], $reference);
    $reference->name = 'DrupalBehaviors';
    $reference->duration = 67;
    $this->assertMeasurement($measurements[8], $reference);
    $reference->name = 'frontend';
    $reference->duration = 893;
    $this->assertMeasurement($measurements[9], $reference);
  }

  public function testParseNon200Entries() {
    // 404
    $entry = '84.193.161.51 [Sunday, 15-Mar-2009 01:09:00 +0100] "?ets=css:72,headerjs:332,domready:800,filefieldValidateAutoAttach:0,HierarchicalSelect:2,collapse:3,teaser:54,textarea:0,DrupalBehaviors:67,frontend:893" 404 "http://dev/d6/node/add/page" "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.0.4) Gecko/2008102920 Firefox/3.0.4" "dev"';
    $measurements = episodes_server_ingestor_parse_entry($entry);
    $this->assertEqual($measurements, FALSE, 'The entry was marked as invalid.');

    // 500
    $entry = '84.193.161.51 [Sunday, 15-Mar-2009 01:09:00 +0100] "?ets=css:72,headerjs:332,domready:800,filefieldValidateAutoAttach:0,HierarchicalSelect:2,collapse:3,teaser:54,textarea:0,DrupalBehaviors:67,frontend:893" 500 "http://dev/d6/node/add/page" "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.0.4) Gecko/2008102920 Firefox/3.0.4" "dev"';
    $measurements = episodes_server_ingestor_parse_entry($entry);
    $this->assertEqual($measurements, FALSE, 'The entry was marked as invalid.');    
  }

  public function testParseExoticUserAgents() {
    // Everything unknown.
    $entry = '84.193.161.51 [Sunday, 15-Mar-2009 01:09:00 +0100] "?ets=css:72,headerjs:332,domready:800,filefieldValidateAutoAttach:0,HierarchicalSelect:2,collapse:3,teaser:54,textarea:0,DrupalBehaviors:67,frontend:893" 200 "http://dev/d6/node/add/page" "exotic UA" "dev"';
    $measurements = episodes_server_ingestor_parse_entry($entry);
    $this->assertNotEqual($measurements, FALSE, 'The entry was marked as valid.');
    $this->assertEqual($measurements[0]->browser,         'unknown', 'The browser is marked as unknown');
    $this->assertEqual($measurements[0]->browser_version, 'unknown', 'The browser version is marked as unknown');
    $this->assertEqual($measurements[0]->os,              'unknown', 'The OS is marked as unknown');

    // Only browser & browser version known.
    $entry = '84.193.161.51 [Sunday, 15-Mar-2009 01:09:00 +0100] "?ets=css:72,headerjs:332,domready:800,filefieldValidateAutoAttach:0,HierarchicalSelect:2,collapse:3,teaser:54,textarea:0,DrupalBehaviors:67,frontend:893" 200 "http://dev/d6/node/add/page" "Mozilla/5.0 (exotic ua) Gecko/2008102920 Firefox/3.0.4" "dev"';
    $measurements = episodes_server_ingestor_parse_entry($entry);
    $this->assertNotEqual($measurements, FALSE, 'The entry was marked as valid.');
    $this->assertEqual($measurements[0]->browser,         'Firefox', 'The browser is detected properly');
    $this->assertEqual($measurements[0]->browser_version, '3.0.4', 'The browser version is detected properly');
    $this->assertEqual($measurements[0]->os,              'unknown', 'The OS is marked as unknown');
    
    // Only OS known.
    $entry = '84.193.161.51 [Sunday, 15-Mar-2009 01:09:00 +0100] "?ets=css:72,headerjs:332,domready:800,filefieldValidateAutoAttach:0,HierarchicalSelect:2,collapse:3,teaser:54,textarea:0,DrupalBehaviors:67,frontend:893" 200 "http://dev/d6/node/add/page" "exotic UA (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.0.4) exotic UA" "dev"';
    $measurements = episodes_server_ingestor_parse_entry($entry);
    $this->assertNotEqual($measurements, FALSE, 'The entry was marked as valid.');
    $this->assertEqual($measurements[0]->browser,         'unknown', 'The browser is marked as unknown');
    $this->assertEqual($measurements[0]->browser_version, 'unknown', 'The browser version is marked as unknown');
    $this->assertEqual($measurements[0]->os,              'Apple',   'The OS is detected properly');
  }


  //--------------------------------------------------------------------------
  // Private methods.

  function assertMeasurement($measurement, $reference) {
    $this->assertEqual($measurement->client_ip,       $reference->client_ip,       'Client IP is correct');
    $this->assertEqual($measurement->server_time,     $reference->server_time,     'Server time is correct');
    $this->assertEqual($measurement->uri,             $reference->uri,             'URI is correct');
    $this->assertEqual($measurement->user_agent,      $reference->user_agent,      'User agent is correct');
    $this->assertEqual($measurement->server_host,     $reference->server_host,     'Server host is correct');
    $this->assertEqual($measurement->browser,         $reference->browser,         'Browser is correct');
    $this->assertEqual($measurement->browser_version, $reference->browser_version, 'Browser version is correct');
    $this->assertEqual($measurement->os,              $reference->os,              'OS is correct');
    $this->assertEqual($measurement->country,         $reference->country,         'Country code is correct' . $measurement->country .' '. $reference->country);
    $this->assertEqual($measurement->name,            $reference->name,            'Measurement name is correct');
    $this->assertEqual($measurement->duration,        $reference->duration,        'Duration is correct');
  }
}
