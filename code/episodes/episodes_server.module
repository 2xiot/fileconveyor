<?php
// $Id$

/**
 * @file
 * Implementation of the core hooks, defines and public functions.
 */


define('EPISODES_SERVER_DISABLED', 0);
define('EPISODES_SERVER_DEBUG', 1);
define('EPISODES_SERVER_ENABLED', 2);

// Ingestor settings.
define('EPISODES_SERVER_INGESTOR_STATUS_VARIABLE', 'episodes_server_ingestor_status');
define('EPISODES_SERVER_INGESTOR_STATUS_DEFAULT', EPISODES_DISABLED);
define('EPISODES_SERVER_INGESTOR_LOG_FILE_VARIABLE', 'episodes_server_ingestor_log_file');
define('EPISODES_SERVER_INGESTOR_LINES_PER_RUN_VARIABLE', 'episodes_server_num_lines_per_run');
define('EPISODES_SERVER_INGESTOR_LINES_PER_RUN_DEFAULT', 10000);
define('EPISODES_SERVER_INGESTOR_LAST_RUN_VARIABLE', 'episodes_server_ingestor_last_run');


//----------------------------------------------------------------------------
// Drupal core hooks.

/**
 * Implementation of hook_menu().
 */
function episodes_server_menu() {
  $items['admin/settings/episodes-server'] = array(
    'title'            => 'Episodes Server',
    'description'      => 'Configure various settings for Episodes Server.',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('episodes_server_admin_settings'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'episodes_server.admin.inc',
  );
  $items['admin/settings/episodes-server/settings'] = array(
    'title'            => 'Settings',
    'access arguments' => array('administer site configuration'),
    'weight'           => -10,
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'file'             => 'episodes_server.admin.inc',
  );
  $items['admin/reports/episodes-server'] = array(
    'title'            => 'Episodes analysis',
    'description'      => 'Analysis of the episodes that were logged through the Episodes Server module',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'episodes_server_report_overall',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'episodes_server.reports.inc',
  );
  $items['admin/reports/episodes-server/overall'] = array(
    'title'            => 'Overall',
    'description'      => 'Analysis of the episodes that were logged through the Episodes Server module',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'episodes_server_report_overall',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => -1,
    'file'             => 'episodes_server.reports.inc',
  );
  $items['admin/reports/episodes-server/page-loading-performance'] = array(
    'title'            => 'Page loading performance',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('episodes_server_report_plp'),
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 0,
    'file'             => 'episodes_server.reports.inc',
  );
  $items['admin/reports/episodes-server/episodes'] = array(
    'title'            => 'Episodes',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'episodes_server_report_episodes',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 1,
    'file'             => 'episodes_server.reports.inc',
  );

  return $items;
}

/**
 * Implementation of hook_cron().
 */
function episodes_server_cron() {
  // Start the timer, include necessary files and retrieve the necessary
  // variables.
  timer_start('episodes_server_ingestor');
  require_once drupal_get_path('module', 'episodes') . '/episodes_server.ingestor.inc';
  $log_file      = variable_get(EPISODES_SERVER_INGESTOR_LOG_FILE_VARIABLE, NULL);
  $lines_per_run = variable_get(EPISODES_SERVER_INGESTOR_LINES_PER_RUN_VARIABLE, EPISODES_SERVER_INGESTOR_LINES_PER_RUN_DEFAULT);
  $last_run      = variable_get(EPISODES_SERVER_INGESTOR_LAST_RUN_VARIABLE, NULL);

  // If the log file isn't configured, there's nothing we can do.
  if (!isset($log_file) || !file_exists($log_file)) {
    return FALSE;
  }

  // Open the log file and get the current inode and size.
  $file = fopen($log_file, 'r');
  $current_stat = fstat($file);
  $current_run['inode'] = $current_stat['ino'];
  $current_run['size']  = $current_stat['size'];

  // If the log file is new or has been truncated, we must reset the offset.
  $current_run['offset'] = (!isset($last_run)
                            || $last_run['inode'] != $current_run['inode']
                            || $last_run['size'] > $current_run['size'])
                         ? 0
                         : $last_run['offset'];

  // If the offset equals the size, there's nothing to process.
  if ($current_run['offset'] == $current_run['size']) {
    watchdog('episodes', 'Everything already processed.');
    return FALSE;
  }

  // Seek to the right offset.
  fseek($file, $current_run['offset'], SEEK_SET);

  // Parse the log file until we reach the maximum number of lines that should
  // be processed per run.
  $line_count = 0;
  while (!feof($file)) {
    $entry = fgets($file);
    if (empty($entry)) {
      continue;
    }
    episodes_server_ingestor_parse_entry($entry);

    // Stop in time.
    $line_count++;
    if ($line_count > $lines_per_run) {
      break;
    }
  }

  // Store the current offset.
  $current_run['offset'] = ftell($file);
  variable_set(EPISODES_SERVER_INGESTOR_LAST_RUN_VARIABLE, $current_run);

  // Close the file, stop the timer and write to watchdog.
  fclose($file);
  $timer = timer_stop('episodes_server_ingestor');
  $duration = round($timer['time'] / 1000, 1);
  watchdog('episodes', 'Processed ' . $line_count . ' entries of the log file in ' . $duration . ' seconds.');
}
