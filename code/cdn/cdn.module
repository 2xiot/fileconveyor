<?php
// $Id$

/**
 * @file
 * Implementation of the core hooks, defines, public and private functions.
 */


define('CDN_DISABLED', 0);
define('CDN_DEBUG', 1);
define('CDN_ENABLED', 2);

// Permissions.
define('CDN_PERM_ACCESS_STATS', 'access per-page statistics');
define('CDN_PERM_ACCESS_DEBUG', 'access files on CDN when in debug mode');

// Variables and values.
define('CDN_MODE_VARIABLE', 'cdn_mode');
define('CDN_MODE_BASIC', 'basic');
define('CDN_MODE_ADVANCED', 'advanced');
define('CDN_STATUS_VARIABLE', 'cdn_status');
define('CDN_STATS_VARIABLE', 'cdn_stats');

// Variables for basic mode.
define('CDN_BASIC_URL_VARIABLE', 'cdn_basic_url');
define('CDN_BASIC_EXTENSIONS_VARIABLE', 'cdn_basic_extensions');
define('CDN_BASIC_EXTENSIONS_DEFAULT', '.css .js .ico .gif .jpg .jpeg .png .svg .otf .ttf .swf');

// Variables for advanced mode.
define('CDN_ADVANCED_SYNCED_FILES_DB_VARIABLE', 'cdn_advanced_synced_files_db');

// Hardcoded settings for accessing the daemon's metadata, to show statistics.
define('CDN_DAEMON_SYNCED_FILES_DB', 'synced_files.db');
define('CDN_DAEMON_PERSISTENT_DATA_DB', 'persistent_data.db');
define('CDN_DAEMON_FSMONITOR_DB', 'fsmonitor.db');
define('CDN_DAEMON_PID_FILE', 'daemon.pid');


//----------------------------------------------------------------------------
// Drupal core.

function custom_file_url_rewrite($path) {
  $status = variable_get(CDN_STATUS_VARIABLE, CDN_DISABLED);
  $mode   = variable_get(CDN_MODE_VARIABLE, CDN_MODE_BASIC);
  $stats = variable_get(CDN_STATS_VARIABLE, FALSE) && user_access(CDN_PERM_ACCESS_STATS);

  if ($status == CDN_ENABLED || ($status == CDN_DEBUG && user_access(CDN_PERM_ACCESS_DEBUG))) {
    if ($stats) {
      $start = microtime();
    }

    // Depending on the mode, use a different function to get the URL.
    if ($mode == CDN_MODE_BASIC) {
      $cdn_url = cdn_basic_get_url($path);
      $server = FALSE;
    }
    else {
      list($cdn_url, $server) = cdn_advanced_get_url($path);
    }

    // If the user can access it, add this to the per-page statistics.
    if ($stats) {
      $end = microtime();
      _cdn_devel_page_stats($path, $cdn_url, $server, $end - $start);
    }

    return $cdn_url;
  }
  else {
    return FALSE;
  }
}

/**
 * Implementation of hook_menu().
 */
function cdn_menu() {
  $items['admin/settings/cdn'] = array(
    'title'            => 'CDN integration',
    'description'      => 'Configure various settings for CDN integration.',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('cdn_admin_settings_form'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'cdn.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function cdn_perm() {
  return array(CDN_PERM_ACCESS_STATS, CDN_PERM_ACCESS_DEBUG);
}

/**
 * Implementation of hook_theme().
 */
function cdn_theme() {
  return array(
    'cdn_page_stats' => array(
      'file'      => 'theme.inc',
      'arguments' => array(
          $file_count                    => NULL,
          $cdn_file_count                => NULL,
          $synced_files_per_server_count => NULL,
          $total_time                    => NULL,
          $synced_files                  => NULL,
          $unsynced_files                => NULL,
      ),
    ),
  );
}

/*
 * Implementation of hook_exit().
 */
function cdn_exit($destination = NULL) {
  if (!$destination && variable_get(CDN_STATS_VARIABLE, FALSE) && user_access(CDN_PERM_ACCESS_STATS)) {
    list(
      $file_count,
      $cdn_file_count,
      $synced_files_per_server_count,
      $total_time,
      $synced_files,
      $unsynced_files,
    ) = _cdn_devel_page_stats();
    
    
    print theme('cdn_page_stats',
      $file_count,
      $cdn_file_count,
      $synced_files_per_server_count,
      $total_time,
      $synced_files,
      $unsynced_files
    );
  }
}

/**
 * Implementation of hook_requirements().
 */
function cdn_requirements($phase) {
  $requirements = array();
  $t = get_t();

  switch ($phase) {
    case 'install' :
    case 'runtime' :
      $status = variable_get(CDN_STATUS_VARIABLE, CDN_DISABLED);
      $mode   = variable_get(CDN_MODE_VARIABLE, CDN_MODE_BASIC);

      $requirements['cdn']['title'] = $t('CDN integration');

      // Set the basic info: disabled/debug/enabled.
      if ($status == CDN_DISABLED) {
        $requirements['cdn'] = array(
          'description' => $t('CDN integration is enabled for no users.'),
          'severity'    => REQUIREMENT_WARNING,
          'value'       => $t('Disabled'),
        );        
      }
      elseif ($status == CDN_DEBUG) {
        $requirements['cdn'] += array(
          'description' => $t('CDN integration is only enabled for users with
                               the %cdn-debug-mode-permission permission',
                               array('%cdn-debug-mode-permission' => CDN_PERM_ACCESS_DEBUG)
                               ),
          'severity' => REQUIREMENT_WARNING,
          'value'    => $t('In debug mode'),
        );        
      }
      else {
        $requirements['cdn'] += array(
          'description' => $t('CDN integration is enabled for all users.'),
          'severity'    => REQUIREMENT_OK,
          'value'       => $t('Enabled'),
        );        
      }

      // When CDN integration is enabled, add on more information.
      if ($status != CDN_DISABLED) {
        if ($mode == CDN_MODE_BASIC) {
          $requirements['cdn']['value'] .= ' – '. t('basic mode');
        }
        else {
          $requirements['cdn']['value'] .= ' – '. t('advanced mode');

          $items = array();

          $synced_files_db = variable_get(CDN_ADVANCED_SYNCED_FILES_DB_VARIABLE, FALSE);

          if ($synced_files_db !== FALSE) {
            $daemon_pid_file = str_replace(CDN_DAEMON_SYNCED_FILES_DB, CDN_DAEMON_PID_FILE, $synced_files_db);
            $persistent_data_db = str_replace(CDN_DAEMON_SYNCED_FILES_DB, CDN_DAEMON_PERSISTENT_DATA_DB, $synced_files_db);
            $drupal_root_path = realpath('.') . '%';

            $synced_files_db_exists = file_exists($synced_files_db);
            $synced_files_db_readable = @fopen($synced_files_db, 'r');
            $daemon_pid_file_exists = file_exists($daemon_pid_file);
            
            $db = _cdn_advanced_get_db_connection();
            $sql = "SELECT COUNT(*) FROM synced_files WHERE input_file LIKE :input_file";
            $stmt = $db->prepare($sql);
            $stmt->bindParam(':input_file', $drupal_root_path, PDO::PARAM_STR);
            $stmt->execute();
            $result = $stmt->fetchAll();
            $synced_file_count = $result[0][0];

            try {
              $db = new PDO('sqlite:' . $persistent_data_db);
            } catch(PDOException $e) {
              $items[] = t("Could not connect to persistent data database.");
            }
            if ($db !== FALSE) {
              $sql = "SELECT COUNT(*) FROM pipeline_queue";
              $stmt = $db->prepare($sql);
              $stmt->execute();
              $result = $stmt->fetchAll();
              $pipeline_queue_count = $result[0][0];

              $sql = "SELECT COUNT(*) FROM pipeline_list";
              $stmt = $db->prepare($sql);
              $stmt->execute();
              $result = $stmt->fetchAll();
              $pipeline_list_count = $result[0][0];
            }


            $items[] = ($synced_files_db_exists) ? t('The synced files database exists.') : t("The synced files database doesn't exist.");
            $items[] = ($synced_files_db_readable) ? t('The synced files database is readable.') : t("The synced files database isn't readable.");
            $items[] = ($synced_files_db_readable) ? t('!synced-file-count files have been synced.', array('!synced-file-count' => $synced_file_count)) : t("Number of synced files is unknown.");
            $items[] = ($daemon_pid_file_exists) ? t('The daemon is currently running.') : '<strong>' . t('The daemon is currently not running.') . '</strong>';
            if (isset($pipeline_queue_count)) {
              $items[] = t("!pipeline-queue-count files are waiting to be synced.", array('!pipeline-queue-count' => $pipeline_queue_count));
              $items[] = t("!pipeline-list-count files are currently being synced.", array('!pipeline-list-count' => $pipeline_list_count));
            }

            // If either of these 3 checks failed, mark this requirement's
            // severity as being an error.
            if (!($synced_files_db_exists && $synced_files_db_readable && $daemon_pid_file_exists)) {
              $requirements['cdn']['severity'] = REQUIREMENT_ERROR;
            }
          }
          else {
            $items[] = t('The synced files database setting has not yet been configured.');
            $requirements['cdn']['severity'] = REQUIREMENT_ERROR;
          }

          $requirements['cdn']['description'] .= '<br />' . theme('item_list', $items);
        }
      }
  }

  return $requirements;
}


//----------------------------------------------------------------------------
// Public functions.

/**
 * Gets the URL for a file when the basic mode is enabled.
 *
 * @param $path
 *   The path to get the URL for.
 */
function cdn_basic_get_url($path) {
  // Ensure the configuration is correct.
  if (variable_get(CDN_BASIC_URL_VARIABLE, FALSE) === FALSE) {
    return FALSE;
  }

  $extensions = str_replace(array(' ', '.'), array('|', '\.'), variable_get(CDN_BASIC_EXTENSIONS_VARIABLE, CDN_BASIC_EXTENSIONS_DEFAULT));

  if (preg_match("/($extensions)$/", $path)) {
    $base_path = base_path();
    $cdn_url = variable_get(CDN_BASIC_URL_VARIABLE, 'http://yourcdn.com');
    return $cdn_url . $base_path . $path;
  }
  else {
    return FALSE;
  }
}

/**
 * Gets the URL for a file when the basic mode is enabled.
 *
 * @param $path
 *   The path to get the URL for.
 */
function cdn_advanced_get_url($path) {
  static $drupal_root_path;

  if (!isset($drupal_root_path)) {
    $drupal_root_path = realpath('.');
  }

  $db = _cdn_advanced_get_db_connection();

  // In case no connection to the database could be made, pretend the file was
  // not found in the synced files database.
  if (!$db) {
    return array(FALSE, FALSE);
  }

  // Retrieve the URLs of the file on the CDN.
  $input_file = $drupal_root_path . '/' . $path;
  $sql = "SELECT url, server FROM synced_files WHERE input_file = :input_file";
  $stmt = $db->prepare($sql);
  $stmt->bindParam(':input_file', $input_file, PDO::PARAM_STR);
  $stmt->execute();
  $urls = $stmt->fetchAll();

  // TODO: build in mechanisms to allow the file to be served from a specific
  // server (that can be either a CDN or a static file server), based on the
  // user's properties (location, membership, …).
  // For now, we just use the first URL.
  return (count($urls)) ? array($urls[0]['url'], $urls[0]['server']) : array(FALSE, FALSE);
}


//----------------------------------------------------------------------------
// Private functions.

/**
 * Get a connection to the database. The resulting PDO object is statically
 * cached.
 *
 * @return
 *   A database connection (through PDO), or FALSE in case of failure.
 */
function _cdn_advanced_get_db_connection() {
  static $db;

  $synced_files_db = variable_get(CDN_ADVANCED_SYNCED_FILES_DB_VARIABLE, FALSE);

  if ($synced_files_db === FALSE || !file_exists($synced_files_db) || filesize($synced_files_db) == 0) {
    $db = FALSE;
  }
  elseif (!isset($db)) {
    try {
      $db = new PDO('sqlite:' . variable_get(CDN_ADVANCED_SYNCED_FILES_DB_VARIABLE, ''));
    } catch(PDOException $e) {
      watchdog('cdn', t("Could not open synced files DB: %error.", array('%error' => $e)));
      $db = FALSE;
    }
  }

  return $db;
}


/**
 * Collects per-page CDN integration statistics.
 *
 * @param $file
 *   The local file path.
 * @param $file_cdn_url
 *   The URL to the file on the CDN if it exists, FALSE otherwise.
 * @param $server
 *   The server the file exists on.
 * @param $time
 *   The time it took to get the current CDN URL.
 * @return
 *   Only if no parameters were passed: the collected statistics.
 */
function _cdn_devel_page_stats($file = FALSE, $file_cdn_url = FALSE, $server = FALSE, $time = FALSE) {
  static $file_count;
  static $cdn_file_count;
  static $synced_files_per_server_count;
  static $total_time;
  static $synced_files;
  static $unsynced_files;

  if (!isset($file_count)) {
    $file_count = 0;
    $cdn_file_count = 0;
    $synced_files_per_server_count = array();
    $total_time = 0;
    $synced_files = array();
    $unsynced_files = array();
  }

  // If the function is called with parameters set, save the statistics. If no
  // parameters are passed, return the collected statistics.
  if ($file) {
    $file_count++;
    $total_time += $time;

    if ($file_cdn_url !== FALSE) {
      $cdn_file_count++;

      $synced_files[] = array(
        'file'    => $file,
        'cdn_url' => $file_cdn_url,
        'server'  => ($server === FALSE) ? '' : $server,
      );

      // $server is only set in advanced mode.
      if ($server !== FALSE) {
        if (!array_key_exists($server, $synced_files_per_server_count)) {
          $synced_files_per_server_count[$server] = 0;
        }
        $synced_files_per_server_count[$server]++;
      }
    }
    else {
      $unsynced_files[] = $file;
    }
  }
  elseif (!$file) {
    return array(
      $file_count,
      $cdn_file_count,
      $synced_files_per_server_count,
      $total_time,
      $synced_files,
      $unsynced_files,
    );
  }
}
